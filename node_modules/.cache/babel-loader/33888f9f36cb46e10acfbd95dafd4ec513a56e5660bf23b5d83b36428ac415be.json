{"ast":null,"code":"import { supabase } from './supabase';\n\n// 회원가입\nexport const signUpService = async userData => {\n  try {\n    var _data$user;\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email: userData.email,\n      password: userData.password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    const userInsertData = {\n      uid: (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id,\n      nickname: userData.nickname,\n      profileImg: userData.profileImg\n    };\n    const {\n      error: insertError\n    } = await supabase.from('users').insert(userInsertData);\n    if (insertError) {\n      throw new Error(insertError.message);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// 로그아웃\nexport const sigOutService = async () => {\n  try {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// 로그인\nexport const loginService = async userData => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email: userData.email,\n      password: userData.password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// 유저 정보 조회\nexport const getUserInfo = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('users').select('*');\n  if (error) {\n    throw new Error(error.message);\n  }\n  return data;\n};\n\n// 비밀번호 찾기\nexport const resetPassword = async email => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.resetPasswordForEmail(email);\n    console.log(data);\n    if (!error) {\n      alert('Please check your email');\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"names":["supabase","signUpService","userData","_data$user","data","error","auth","signUp","email","password","Error","message","userInsertData","uid","user","id","nickname","profileImg","insertError","from","insert","console","log","sigOutService","signOut","loginService","signInWithPassword","getUserInfo","select","resetPassword","resetPasswordForEmail","alert"],"sources":["C:/React/team_one/src/services/supabase/auth.ts"],"sourcesContent":["import { UserType } from '../../types/supabase';\r\nimport { supabase } from './supabase';\r\n\r\n// 회원가입\r\nexport const signUpService = async (userData: UserType) => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email: userData.email,\r\n      password: userData.password\r\n    });\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    const userInsertData = {\r\n      uid: data.user?.id,\r\n      nickname: userData.nickname,\r\n      profileImg: userData.profileImg\r\n    };\r\n\r\n    const { error: insertError } = await supabase.from('users').insert(userInsertData);\r\n    if (insertError) {\r\n      throw new Error(insertError.message);\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 로그아웃\r\nexport const sigOutService = async () => {\r\n  try {\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 로그인\r\nexport const loginService = async (userData: Omit<UserType, 'nickname' | 'profileImg'>) => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email: userData.email,\r\n      password: userData.password\r\n    });\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 유저 정보 조회\r\nexport const getUserInfo = async (): Promise<Omit<UserType[], 'email' | 'password'>> => {\r\n  const { data, error } = await supabase.from('users').select('*');\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n  return data;\r\n};\r\n\r\n// 비밀번호 찾기\r\nexport const resetPassword = async (email: string) => {\r\n  try {\r\n    const { data, error } = await supabase.auth.resetPasswordForEmail(email);\r\n    console.log(data);\r\n    if (!error) {\r\n      alert('Please check your email');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
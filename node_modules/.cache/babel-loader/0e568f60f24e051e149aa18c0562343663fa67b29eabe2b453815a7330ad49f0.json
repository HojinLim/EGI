{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\common\\\\Search.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useAtom } from 'jotai';\nimport { atom } from 'jotai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const searchKeywordAtom = atom('');\nconst Search = () => {\n  _s();\n  const [searchKeyword, setSearchKeyword] = useAtom(searchKeywordAtom);\n  const handleSearchInputChange = e => {\n    setSearchKeyword(e.target.value);\n  };\n  const handleSearchInputKeyDown = e => {\n    if (e.key === 'Enter') {\n      // 검색어 입력과 동시에 엔터 키를 눌렀을 때만 검색 실행\n      setSearchKeyword(e.currentTarget.value);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchKeyword,\n      onChange: handleSearchInputChange,\n      onKeyDown: handleSearchInputKeyDown // 엔터 키를 감지하는 이벤트 핸들러 연결\n      ,\n      placeholder: \"\\uAC80\\uC0C9\\uC5B4\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"0lvAdzRPWjEAJCZoWSSdjdaUSrE=\", false, function () {\n  return [useAtom];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useAtom","atom","jsxDEV","_jsxDEV","searchKeywordAtom","Search","_s","searchKeyword","setSearchKeyword","handleSearchInputChange","e","target","value","handleSearchInputKeyDown","key","currentTarget","children","type","onChange","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/common/Search.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { atom } from 'jotai';\r\n\r\nexport const searchKeywordAtom = atom<string>('');\r\n\r\nconst Search = () => {\r\n  const [searchKeyword, setSearchKeyword] = useAtom(searchKeywordAtom);\r\n\r\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchKeyword(e.target.value);\r\n  };\r\n\r\n  const handleSearchInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      // 검색어 입력과 동시에 엔터 키를 눌렀을 때만 검색 실행\r\n      setSearchKeyword(e.currentTarget.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={searchKeyword as string}\r\n        onChange={handleSearchInputChange}\r\n        onKeyDown={handleSearchInputKeyDown} // 엔터 키를 감지하는 이벤트 핸들러 연결\r\n        placeholder=\"검색어를 입력하세요\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,OAAO,MAAMC,iBAAiB,GAAGH,IAAI,CAAS,EAAE,CAAC;AAEjD,MAAMI,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,OAAO,CAACI,iBAAiB,CAAC;EAEpE,MAAMK,uBAAuB,GAAIC,CAAsC,IAAK;IAC1EF,gBAAgB,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,wBAAwB,GAAIH,CAAwC,IAAK;IAC7E,IAAIA,CAAC,CAACI,GAAG,KAAK,OAAO,EAAE;MACrB;MACAN,gBAAgB,CAACE,CAAC,CAACK,aAAa,CAACH,KAAK,CAAC;IACzC;EACF,CAAC;EAED,oBACET,OAAA;IAAAa,QAAA,eACEb,OAAA;MACEc,IAAI,EAAC,MAAM;MACXL,KAAK,EAAEL,aAAwB;MAC/BW,QAAQ,EAAET,uBAAwB;MAClCU,SAAS,EAAEN,wBAAyB,CAAC;MAAA;MACrCO,WAAW,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAzBID,MAAM;EAAA,QACgCL,OAAO;AAAA;AAAAyB,EAAA,GAD7CpB,MAAM;AA2BZ,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\Post.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const navigate = useNavigate();\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const handleImageChange = e => {\n    const selectedFiles = e.target.files;\n    if (selectedFiles) {\n      const updatedSelectedImages = [];\n      for (let i = 0; i < selectedFiles.length; i++) {\n        const selectedFile = selectedFiles[i];\n        const originalFileName = selectedFile.name;\n        const fileExtension = originalFileName.split('.').pop();\n        const randomFileName = uuidv4() + '.' + fileExtension;\n        updatedSelectedImages.push(new File([selectedFile], randomFileName));\n      }\n      setSelectedImages(updatedSelectedImages);\n    }\n  };\n  const handleAddPost = async () => {\n    if (!newTitle.trim() || !newBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    const uploadPromises = selectedImages.map(async image => {\n      const {\n        data,\n        error\n      } = await supabase.storage.from('1st').upload(`images/${image.name}`, image);\n      if (error) {\n        console.error('Error uploading image to Supabase storage:', error);\n        alert('이미지 업로드 중 에러가 발생했습니다!');\n        return null;\n      }\n      return data.path;\n    });\n    const uploadedImagePaths = await Promise.all(uploadPromises);\n    const newPosts = uploadedImagePaths.map(imageUrl => ({\n      title: newTitle,\n      body: newBody,\n      image_url: imageUrl\n    }));\n    const {\n      error: insertError\n    } = await supabase.from('posts').insert(newPosts);\n    if (insertError) {\n      console.error('Error adding post:', insertError);\n      alert('에러가 발생했습니다!');\n      return;\n    }\n    setNewTitle('');\n    setNewBody('');\n    setSelectedImages([]);\n    alert('글 작성이 완료되었습니다.');\n    navigate(`/`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: newTitle,\n      onChange: e => setNewTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      value: newBody,\n      onChange: content => setNewBody(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      multiple: true,\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddPost,\n      children: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"I2Cfbkjbpj42N+ND6a50+mP2TXw=\", false, function () {\n  return [useNavigate];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","Post","_s","navigate","newTitle","setNewTitle","newBody","setNewBody","selectedImages","setSelectedImages","handleImageChange","e","selectedFiles","target","files","updatedSelectedImages","i","length","selectedFile","originalFileName","name","fileExtension","split","pop","randomFileName","push","File","handleAddPost","trim","alert","uploadPromises","map","image","data","error","storage","from","upload","console","path","uploadedImagePaths","Promise","all","newPosts","imageUrl","title","body","image_url","insertError","insert","children","type","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","content","accept","multiple","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/Post.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newBody, setNewBody] = useState('');\r\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles) {\r\n      const updatedSelectedImages: File[] = [];\r\n      for (let i = 0; i < selectedFiles.length; i++) {\r\n        const selectedFile = selectedFiles[i];\r\n        const originalFileName = selectedFile.name;\r\n        const fileExtension = originalFileName.split('.').pop();\r\n        const randomFileName = uuidv4() + '.' + fileExtension;\r\n        updatedSelectedImages.push(new File([selectedFile], randomFileName));\r\n      }\r\n      setSelectedImages(updatedSelectedImages);\r\n    }\r\n  };\r\n\r\n  const handleAddPost = async () => {\r\n    if (!newTitle.trim() || !newBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const uploadPromises = selectedImages.map(async (image) => {\r\n      const { data, error } = await supabase.storage.from('1st').upload(`images/${image.name}`, image);\r\n\r\n      if (error) {\r\n        console.error('Error uploading image to Supabase storage:', error);\r\n        alert('이미지 업로드 중 에러가 발생했습니다!');\r\n        return null;\r\n      }\r\n\r\n      return data.path;\r\n    });\r\n\r\n    const uploadedImagePaths = await Promise.all(uploadPromises);\r\n\r\n    const newPosts = uploadedImagePaths.map((imageUrl) => ({\r\n      title: newTitle,\r\n      body: newBody,\r\n      image_url: imageUrl\r\n    }));\r\n\r\n    const { error: insertError } = await supabase.from('posts').insert(newPosts);\r\n    if (insertError) {\r\n      console.error('Error adding post:', insertError);\r\n      alert('에러가 발생했습니다!');\r\n      return;\r\n    }\r\n\r\n    setNewTitle('');\r\n    setNewBody('');\r\n    setSelectedImages([]);\r\n    alert('글 작성이 완료되었습니다.');\r\n    navigate(`/`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" placeholder=\"Title\" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\r\n      <Editor value={newBody} onChange={(content) => setNewBody(content)} />\r\n\r\n      <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageChange} />\r\n      <button onClick={handleAddPost}>글 작성하기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
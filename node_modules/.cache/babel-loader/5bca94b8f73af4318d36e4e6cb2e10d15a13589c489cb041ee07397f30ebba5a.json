{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\comments\\\\comment\\\\CommentItem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport * as S from './Styled.Comments';\nimport CommentPanel from './CommentPanel';\nimport ReplyCommentForm from '../reply/ReplyCommentForm';\n// import baseProfile from '../../image/baseprofile.jpeg';\nimport useCommentMutation from '../../../hooks/useCommentMutation';\nimport { useAtom } from 'jotai';\nimport { jotaiUserDataAtom } from '../../common/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CommentItem = ({\n  comment,\n  pid,\n  isUpdating,\n  setIsUpdating\n}) => {\n  _s();\n  const [updateComment, setUpdateComment] = useState('');\n  const [isAddReply, setIsAddReply] = useState(false);\n  const [updateCommentId, setUpdateCommentId] = useState(null);\n  const [jotaiUserData] = useAtom(jotaiUserDataAtom);\n  const {\n    updateCommentMutation,\n    deleteCommentMutation\n  } = useCommentMutation();\n  const handleUpdateCommentBtnClick = (cid, comment) => {\n    setIsUpdating(true);\n    setUpdateComment(comment);\n    setUpdateCommentId(cid);\n  };\n  const handleUpdateCommentInputChange = e => {\n    setUpdateComment(e.target.value);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleUpdateBtnClick();\n    }\n  };\n  const handleUpdateBtnClick = () => {\n    if (updateComment === '') {\n      alert('작성된 댓글이 없습니다.');\n      return;\n    }\n    const newComment = {\n      cid: updateCommentId,\n      body: updateComment\n    };\n    updateCommentMutation.mutate(newComment);\n    setUpdateComment('');\n    setIsUpdating(false);\n    setUpdateCommentId(null);\n  };\n  const handleUpdateCommentCancel = () => {\n    setIsUpdating(false);\n    setUpdateCommentId(null);\n  };\n  const handleDeleteCommentBtnClick = cid => {\n    const isConfirmed = window.confirm('삭제하시겠습니까?');\n    if (!isConfirmed) {\n      return;\n    }\n    deleteCommentMutation.mutate(cid);\n  };\n  const handleReplyBtnClick = () => {\n    if (!jotaiUserData) {\n      alert('로그인 후 사용 가능합니다.');\n      return;\n    }\n    setIsAddReply(!isAddReply);\n  };\n  const renderCommentBody = useMemo(() => {\n    if (isUpdating && updateCommentId === comment.cid) {\n      return /*#__PURE__*/_jsxDEV(S.CommentInput, {\n        value: updateComment,\n        onChange: handleUpdateCommentInputChange,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(S.CommentBody, {\n          children: comment.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.Button, {\n          onClick: handleReplyBtnClick,\n          children: \"\\uB2F5\\uAE00\\uB2EC\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  }, [isUpdating, updateCommentId, comment, updateComment, handleUpdateCommentInputChange, handleKeyDown, setIsAddReply]);\n  console.log('comment', comment);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(S.CommentItem, {\n      children: [/*#__PURE__*/_jsxDEV(S.CommentProfileImgBox, {\n        children: [/*#__PURE__*/_jsxDEV(S.CommentProfileImg, {\n          src: `${process.env.REACT_APP_SUPABASE_STORAGE_URL}${comment === null || comment === void 0 ? void 0 : comment.profileimg}`,\n          alt: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.CommentAuthor, {\n          children: comment.nickname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(S.CommentTextBox, {\n        children: renderCommentBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), (jotaiUserData === null || jotaiUserData === void 0 ? void 0 : jotaiUserData.uid) === comment.uid ? isUpdating && updateCommentId === comment.cid ? /*#__PURE__*/_jsxDEV(CommentPanel, {\n        commenting: true,\n        handleUpdateBtnClick: handleUpdateBtnClick,\n        handleUpdateCommentCancel: handleUpdateCommentCancel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(CommentPanel, {\n        commenting: false,\n        handleUpdateCommentBtnClick: () => handleUpdateCommentBtnClick(comment.cid, comment.body),\n        handleDeleteCommentBtnClick: () => handleDeleteCommentBtnClick(comment.cid)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '105px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), isAddReply && /*#__PURE__*/_jsxDEV(ReplyCommentForm, {\n      pid: pid,\n      cid: comment.cid,\n      setIsAddReply: setIsAddReply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n};\n_s(CommentItem, \"MJm8gRLRgyVlTpJwpKRCYmn/koU=\", false, function () {\n  return [useAtom, useCommentMutation];\n});\n_c = CommentItem;\nexport default CommentItem;\nvar _c;\n$RefreshReg$(_c, \"CommentItem\");","map":{"version":3,"names":["React","useMemo","useState","S","CommentPanel","ReplyCommentForm","useCommentMutation","useAtom","jotaiUserDataAtom","jsxDEV","_jsxDEV","Fragment","_Fragment","CommentItem","comment","pid","isUpdating","setIsUpdating","_s","updateComment","setUpdateComment","isAddReply","setIsAddReply","updateCommentId","setUpdateCommentId","jotaiUserData","updateCommentMutation","deleteCommentMutation","handleUpdateCommentBtnClick","cid","handleUpdateCommentInputChange","e","target","value","handleKeyDown","key","handleUpdateBtnClick","alert","newComment","body","mutate","handleUpdateCommentCancel","handleDeleteCommentBtnClick","isConfirmed","window","confirm","handleReplyBtnClick","renderCommentBody","CommentInput","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","children","CommentBody","Button","onClick","console","log","CommentProfileImgBox","CommentProfileImg","src","process","env","REACT_APP_SUPABASE_STORAGE_URL","profileimg","alt","CommentAuthor","nickname","CommentTextBox","uid","commenting","style","width","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/comments/comment/CommentItem.tsx"],"sourcesContent":["import React, { Dispatch, useMemo, useState } from 'react';\r\nimport * as S from './Styled.Comments';\r\nimport CommentPanel from './CommentPanel';\r\nimport ReplyCommentForm from '../reply/ReplyCommentForm';\r\n// import baseProfile from '../../image/baseprofile.jpeg';\r\nimport useCommentMutation from '../../../hooks/useCommentMutation';\r\nimport { SetStateAction, useAtom } from 'jotai';\r\nimport { jotaiUserDataAtom } from '../../common/Header';\r\n\r\nimport type { CommentType } from '../../../types/supabase';\r\ninterface CommentItemProps {\r\n  pid: string;\r\n  comment: CommentType;\r\n  isUpdating: boolean;\r\n  setIsUpdating: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst CommentItem = ({ comment, pid, isUpdating, setIsUpdating }: CommentItemProps) => {\r\n  const [updateComment, setUpdateComment] = useState('');\r\n  const [isAddReply, setIsAddReply] = useState(false);\r\n\r\n  const [updateCommentId, setUpdateCommentId] = useState<number | null>(null);\r\n\r\n  const [jotaiUserData] = useAtom(jotaiUserDataAtom);\r\n\r\n  const { updateCommentMutation, deleteCommentMutation } = useCommentMutation();\r\n\r\n  const handleUpdateCommentBtnClick = (cid: number, comment: string) => {\r\n    setIsUpdating(true);\r\n    setUpdateComment(comment);\r\n    setUpdateCommentId(cid);\r\n  };\r\n\r\n  const handleUpdateCommentInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setUpdateComment(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleUpdateBtnClick();\r\n    }\r\n  };\r\n\r\n  const handleUpdateBtnClick = () => {\r\n    if (updateComment === '') {\r\n      alert('작성된 댓글이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const newComment = {\r\n      cid: updateCommentId!,\r\n      body: updateComment\r\n    };\r\n\r\n    updateCommentMutation.mutate(newComment);\r\n\r\n    setUpdateComment('');\r\n    setIsUpdating(false);\r\n    setUpdateCommentId(null);\r\n  };\r\n\r\n  const handleUpdateCommentCancel = () => {\r\n    setIsUpdating(false);\r\n    setUpdateCommentId(null);\r\n  };\r\n\r\n  const handleDeleteCommentBtnClick = (cid: number) => {\r\n    const isConfirmed = window.confirm('삭제하시겠습니까?');\r\n    if (!isConfirmed) {\r\n      return;\r\n    }\r\n\r\n    deleteCommentMutation.mutate(cid);\r\n  };\r\n\r\n  const handleReplyBtnClick = () => {\r\n    if (!jotaiUserData) {\r\n      alert('로그인 후 사용 가능합니다.');\r\n      return;\r\n    }\r\n    setIsAddReply(!isAddReply);\r\n  };\r\n\r\n  const renderCommentBody = useMemo(() => {\r\n    if (isUpdating && updateCommentId === comment.cid) {\r\n      return (\r\n        <S.CommentInput value={updateComment} onChange={handleUpdateCommentInputChange} onKeyDown={handleKeyDown} />\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <S.CommentBody>{comment.body}</S.CommentBody>\r\n          <S.Button onClick={handleReplyBtnClick}>답글달기</S.Button>\r\n        </>\r\n      );\r\n    }\r\n  }, [\r\n    isUpdating,\r\n    updateCommentId,\r\n    comment,\r\n    updateComment,\r\n    handleUpdateCommentInputChange,\r\n    handleKeyDown,\r\n    setIsAddReply\r\n  ]);\r\n\r\n  console.log('comment', comment);\r\n\r\n  return (\r\n    <>\r\n      <S.CommentItem>\r\n        <S.CommentProfileImgBox>\r\n          <S.CommentProfileImg\r\n            src={`${process.env.REACT_APP_SUPABASE_STORAGE_URL}${comment?.profileimg}`}\r\n            alt=\"Profile\"\r\n          />\r\n          <S.CommentAuthor>{comment.nickname}</S.CommentAuthor>\r\n        </S.CommentProfileImgBox>\r\n        <S.CommentTextBox>{renderCommentBody}</S.CommentTextBox>\r\n        {jotaiUserData?.uid === comment.uid ? (\r\n          isUpdating && updateCommentId === comment.cid ? (\r\n            <CommentPanel\r\n              commenting={true}\r\n              handleUpdateBtnClick={handleUpdateBtnClick}\r\n              handleUpdateCommentCancel={handleUpdateCommentCancel}\r\n            />\r\n          ) : (\r\n            <CommentPanel\r\n              commenting={false}\r\n              handleUpdateCommentBtnClick={() => handleUpdateCommentBtnClick(comment.cid, comment.body)}\r\n              handleDeleteCommentBtnClick={() => handleDeleteCommentBtnClick(comment.cid)}\r\n            />\r\n          )\r\n        ) : (\r\n          <div style={{ width: '105px' }} />\r\n        )}\r\n      </S.CommentItem>\r\n      {isAddReply && <ReplyCommentForm pid={pid} cid={comment.cid} setIsAddReply={setIsAddReply} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\Post.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const navigate = useNavigate();\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const handleAddPost = async () => {\n    if (!newTitle.trim() || !newBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    let imageUrl = '';\n    if (selectedImage) {\n      const {\n        data: existingImage\n      } = await supabase.from('image_metadata').select('public_url').eq('name', selectedImage.name).single();\n      if (existingImage) {\n        imageUrl = existingImage.public_url; // 이미지가 이미 존재할 경우 URL 할당\n      } else {\n        // 이미지 스토리지에 이미 동일한 이름의 파일이 있는지 확인\n        const {\n          data: existingFiles,\n          error: storageError\n        } = await supabase.storage.from('1st').list(`images/${selectedImage.name}`);\n        if (storageError) {\n          console.error('Error listing files in Supabase storage:', storageError);\n          alert('이미지 스토리지 확인 중 에러가 발생했습니다!');\n          return;\n        }\n        if (existingFiles.length === 0) {\n          // 이미지 스토리지 업로드\n          const {\n            data,\n            error: uploadError\n          } = await supabase.storage.from('1st').upload(`images/${selectedImage.name}`, selectedImage);\n          if (uploadError) {\n            console.error('Error uploading image to Supabase storage:', uploadError);\n            alert('이미지 업로드 중 에러가 발생했습니다!');\n            return;\n          }\n          imageUrl = data.path;\n\n          // 이미지 메타데이터 추가\n          await supabase.from('image_metadata').upsert([{\n            name: selectedImage.name,\n            public_url: imageUrl\n          }]);\n        } else {\n          imageUrl = existingFiles[0].publicURL; // 이미지가 이미 존재할 경우 URL 할당\n        }\n      }\n    }\n\n    const {\n      error: insertError\n    } = await supabase.from('posts').insert([{\n      title: newTitle,\n      body: newBody,\n      image_urls: imageUrl\n    }]);\n    if (insertError) {\n      console.error('Error adding post:', insertError);\n      alert('에러가 발생했습니다!');\n      return;\n    }\n    setNewTitle('');\n    setNewBody('');\n    setSelectedImage(null);\n    alert('글 작성이 완료되었습니다.');\n    navigate(`/`);\n  };\n  const handleImageChange = e => {\n    const selectedFile = e.target.files && e.target.files[0];\n    if (selectedFile) {\n      const originalFileName = selectedFile.name;\n      const fileExtension = originalFileName.split('.').pop();\n      const sanitizedFileName = originalFileName.replace(/[^a-zA-Z0-9]/g, '');\n      const randomFileName = uuidv4() + '.' + (fileExtension || 'jpg');\n      setSelectedImage(new File([selectedFile], sanitizedFileName ? sanitizedFileName : randomFileName));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        value: newBody,\n        onChange: content => setNewBody(content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPost,\n        children: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"l8+g+vIMhYN8e0w4Th9/zIDwKIA=\", false, function () {\n  return [useNavigate];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","Post","_s","navigate","newTitle","setNewTitle","newBody","setNewBody","selectedImage","setSelectedImage","handleAddPost","trim","alert","imageUrl","data","existingImage","from","select","eq","name","single","public_url","existingFiles","error","storageError","storage","list","console","length","uploadError","upload","path","upsert","publicURL","insertError","insert","title","body","image_urls","handleImageChange","e","selectedFile","target","files","originalFileName","fileExtension","split","pop","sanitizedFileName","replace","randomFileName","File","children","type","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","content","accept","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/Post.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newBody, setNewBody] = useState('');\r\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\r\n\r\n  const handleAddPost = async () => {\r\n    if (!newTitle.trim() || !newBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    let imageUrl = '';\r\n\r\n    if (selectedImage) {\r\n      const { data: existingImage } = await supabase\r\n        .from('image_metadata')\r\n        .select('public_url')\r\n        .eq('name', selectedImage.name)\r\n        .single();\r\n\r\n      if (existingImage) {\r\n        imageUrl = existingImage.public_url; // 이미지가 이미 존재할 경우 URL 할당\r\n      } else {\r\n        // 이미지 스토리지에 이미 동일한 이름의 파일이 있는지 확인\r\n        const { data: existingFiles, error: storageError } = await supabase.storage\r\n          .from('1st')\r\n          .list(`images/${selectedImage.name}`);\r\n\r\n        if (storageError) {\r\n          console.error('Error listing files in Supabase storage:', storageError);\r\n          alert('이미지 스토리지 확인 중 에러가 발생했습니다!');\r\n          return;\r\n        }\r\n\r\n        if (existingFiles.length === 0) {\r\n          // 이미지 스토리지 업로드\r\n          const { data, error: uploadError } = await supabase.storage\r\n            .from('1st')\r\n            .upload(`images/${selectedImage.name}`, selectedImage);\r\n\r\n          if (uploadError) {\r\n            console.error('Error uploading image to Supabase storage:', uploadError);\r\n            alert('이미지 업로드 중 에러가 발생했습니다!');\r\n            return;\r\n          }\r\n\r\n          imageUrl = data.path;\r\n\r\n          // 이미지 메타데이터 추가\r\n          await supabase.from('image_metadata').upsert([{ name: selectedImage.name, public_url: imageUrl }]);\r\n        } else {\r\n          imageUrl = existingFiles[0].publicURL; // 이미지가 이미 존재할 경우 URL 할당\r\n        }\r\n      }\r\n    }\r\n\r\n    const { error: insertError } = await supabase\r\n      .from('posts')\r\n      .insert([{ title: newTitle, body: newBody, image_urls: imageUrl }]);\r\n\r\n    if (insertError) {\r\n      console.error('Error adding post:', insertError);\r\n      alert('에러가 발생했습니다!');\r\n      return;\r\n    }\r\n\r\n    setNewTitle('');\r\n    setNewBody('');\r\n    setSelectedImage(null);\r\n    alert('글 작성이 완료되었습니다.');\r\n    navigate(`/`);\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files && e.target.files[0];\r\n    if (selectedFile) {\r\n      const originalFileName = selectedFile.name;\r\n      const fileExtension = originalFileName.split('.').pop();\r\n      const sanitizedFileName = originalFileName.replace(/[^a-zA-Z0-9]/g, '');\r\n\r\n      const randomFileName = uuidv4() + '.' + (fileExtension || 'jpg');\r\n\r\n      setSelectedImage(new File([selectedFile], sanitizedFileName ? sanitizedFileName : randomFileName));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Title\" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\r\n        <Editor value={newBody} onChange={(content) => setNewBody(content)} />\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n        <button onClick={handleAddPost}>글 작성하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
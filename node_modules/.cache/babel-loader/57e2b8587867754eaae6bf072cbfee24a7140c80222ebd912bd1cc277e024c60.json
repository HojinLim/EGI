{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\Post.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const navigate = useNavigate();\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const uploadNewImage = async imageFile => {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('1st').upload(`images/${imageFile.name}`, imageFile);\n    if (error) {\n      console.error('Error uploading image to Supabase storage:', error);\n      alert('이미지 업로드 중 에러가 발생했습니다!');\n      return '';\n    }\n    const imageUrl = data.path;\n    await supabase.from('image_metadata').upsert([{\n      name: imageFile.name,\n      public_url: imageUrl\n    }]);\n    return imageUrl;\n  };\n  const handleAddPost = async () => {\n    if (!newTitle.trim() || !newBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    let imageUrl = '';\n    if (selectedImage) {\n      const {\n        data: existingImage\n      } = await supabase.from('image_metadata').select('public_url').eq('name', selectedImage.name).single();\n      if (existingImage) {\n        imageUrl = existingImage.public_url; // 이미지가 이미 존재할 경우 URL 할당\n      } else {\n        imageUrl = await uploadNewImage(selectedImage); // 존재하지 않는 이미지 업로드 함수 호출\n      }\n    }\n\n    const {\n      error: insertError\n    } = await supabase.from('posts').insert([{\n      title: newTitle,\n      body: newBody,\n      image_urls: imageUrl\n    }]);\n    if (insertError) {\n      console.error('Error adding post:', insertError);\n      alert('에러가 발생했습니다!');\n      return;\n    }\n    setNewTitle('');\n    setNewBody('');\n    setSelectedImage(null);\n    alert('글 작성이 완료되었습니다.');\n    navigate(`/`);\n  };\n  const handleImageChange = e => {\n    const selectedFile = e.target.files && e.target.files[0];\n    if (selectedFile) {\n      const originalFileName = selectedFile.name;\n      const fileExtension = originalFileName.split('.').pop();\n      const sanitizedFileName = originalFileName.replace(/[^a-zA-Z0-9]/g, '');\n      const randomFileName = uuidv4() + '.' + (fileExtension || 'jpg');\n      setSelectedImage(new File([selectedFile], sanitizedFileName ? sanitizedFileName : randomFileName));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        value: newBody,\n        onChange: content => setNewBody(content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPost,\n        children: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"l8+g+vIMhYN8e0w4Th9/zIDwKIA=\", false, function () {\n  return [useNavigate];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","Post","_s","navigate","newTitle","setNewTitle","newBody","setNewBody","selectedImage","setSelectedImage","uploadNewImage","imageFile","data","error","storage","from","upload","name","console","alert","imageUrl","path","upsert","public_url","handleAddPost","trim","existingImage","select","eq","single","insertError","insert","title","body","image_urls","handleImageChange","e","selectedFile","target","files","originalFileName","fileExtension","split","pop","sanitizedFileName","replace","randomFileName","File","children","type","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","content","accept","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/Post.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newBody, setNewBody] = useState('');\r\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\r\n\r\n  const uploadNewImage = async (imageFile: File) => {\r\n    const { data, error } = await supabase.storage.from('1st').upload(`images/${imageFile.name}`, imageFile);\r\n\r\n    if (error) {\r\n      console.error('Error uploading image to Supabase storage:', error);\r\n      alert('이미지 업로드 중 에러가 발생했습니다!');\r\n      return '';\r\n    }\r\n\r\n    const imageUrl = data.path;\r\n\r\n    await supabase.from('image_metadata').upsert([{ name: imageFile.name, public_url: imageUrl }]);\r\n    return imageUrl;\r\n  };\r\n\r\n  const handleAddPost = async () => {\r\n    if (!newTitle.trim() || !newBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    let imageUrl = '';\r\n\r\n    if (selectedImage) {\r\n      const { data: existingImage } = await supabase\r\n        .from('image_metadata')\r\n        .select('public_url')\r\n        .eq('name', selectedImage.name)\r\n        .single();\r\n\r\n      if (existingImage) {\r\n        imageUrl = existingImage.public_url; // 이미지가 이미 존재할 경우 URL 할당\r\n      } else {\r\n        imageUrl = await uploadNewImage(selectedImage); // 존재하지 않는 이미지 업로드 함수 호출\r\n      }\r\n    }\r\n\r\n    const { error: insertError } = await supabase\r\n      .from('posts')\r\n      .insert([{ title: newTitle, body: newBody, image_urls: imageUrl }]);\r\n\r\n    if (insertError) {\r\n      console.error('Error adding post:', insertError);\r\n      alert('에러가 발생했습니다!');\r\n      return;\r\n    }\r\n\r\n    setNewTitle('');\r\n    setNewBody('');\r\n    setSelectedImage(null);\r\n    alert('글 작성이 완료되었습니다.');\r\n    navigate(`/`);\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files && e.target.files[0];\r\n    if (selectedFile) {\r\n      const originalFileName = selectedFile.name;\r\n      const fileExtension = originalFileName.split('.').pop();\r\n      const sanitizedFileName = originalFileName.replace(/[^a-zA-Z0-9]/g, '');\r\n\r\n      const randomFileName = uuidv4() + '.' + (fileExtension || 'jpg');\r\n\r\n      setSelectedImage(new File([selectedFile], sanitizedFileName ? sanitizedFileName : randomFileName));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Title\" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\r\n        <Editor value={newBody} onChange={(content) => setNewBody(content)} />\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n        <button onClick={handleAddPost}>글 작성하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
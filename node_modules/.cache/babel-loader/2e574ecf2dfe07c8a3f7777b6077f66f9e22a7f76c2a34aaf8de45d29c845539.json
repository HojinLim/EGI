{"ast":null,"code":"import { supabase } from './supabase';\nexport const fetchJjimCount = async pid => {\n  console.log('fetch jjim >>>>> ' + pid);\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('jjim').select('*').eq('pid', pid);\n    if (error) {\n      console.log('Error fetching comments:', error);\n      alert('에러가 발생했습니다.' + error);\n      return [];\n    }\n    return data;\n  } catch (e) {\n    console.log(e);\n    alert('알 수 없는 오류가 발생했습니다.');\n    return [];\n  }\n};\nexport const fetchAllJjim = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('jjim').select('*');\n    if (error) {\n      console.log('Error fetching comments:', error);\n      alert('에러가 발생했습니다.' + error);\n      return [];\n    }\n    return data;\n  } catch (e) {\n    console.log(e);\n    alert('알 수 없는 오류가 발생했습니다.');\n    return [];\n  }\n};\nexport const toggleJjim = async data => {\n  try {\n    const {\n      data: isJjim,\n      error: isJjimError\n    } = await supabase.from('jjim').select('*').eq('pid', data.pid).eq('uid', data.uid);\n    if (isJjimError) {\n      console.log('Error fetching jjim:', isJjimError);\n      alert('에러가 발생했습니다.' + isJjimError);\n      return false;\n    }\n    if (isJjim.length > 0) {\n      const {\n        error: deleteError\n      } = await supabase.from('jjim').delete().eq('pid', data.pid).eq('uid', data.uid);\n      if (deleteError) {\n        console.log('Error deleting jjim:', deleteError);\n        alert('에러가 발생했습니다.' + deleteError);\n        return false;\n      }\n      alert('찜을 취소하셨습니다.');\n      return true;\n    } else {\n      const {\n        error: insertError\n      } = await supabase.from('jjim').insert([{\n        pid: data.pid,\n        uid: data.uid\n      }]);\n      if (insertError) {\n        console.log('Error inserting jjim:', insertError);\n        alert('에러가 발생했습니다.' + insertError);\n        return false;\n      }\n      alert('찜 하셨습니다.');\n      return true;\n    }\n  } catch (e) {\n    console.log(e);\n    alert('알 수 없는 오류가 발생했습니다.');\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","fetchJjimCount","pid","console","log","data","error","from","select","eq","alert","e","fetchAllJjim","toggleJjim","isJjim","isJjimError","uid","length","deleteError","delete","insertError","insert"],"sources":["C:/React/team_one/src/services/supabase/jjim.ts"],"sourcesContent":["import { JjimType } from '../../types/supabase';\r\nimport { supabase } from './supabase';\r\n\r\nexport const fetchJjimCount = async (pid: string) => {\r\n  console.log('fetch jjim >>>>> ' + pid);\r\n  try {\r\n    const { data, error } = await supabase.from('jjim').select('*').eq('pid', pid);\r\n    if (error) {\r\n      console.log('Error fetching comments:', error);\r\n      alert('에러가 발생했습니다.' + error);\r\n      return [];\r\n    }\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n    alert('알 수 없는 오류가 발생했습니다.');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchAllJjim = async () => {\r\n  try {\r\n    const { data, error } = await supabase.from('jjim').select('*');\r\n    if (error) {\r\n      console.log('Error fetching comments:', error);\r\n      alert('에러가 발생했습니다.' + error);\r\n      return [];\r\n    }\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n    alert('알 수 없는 오류가 발생했습니다.');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const toggleJjim = async (data: JjimType) => {\r\n  try {\r\n    const { data: isJjim, error: isJjimError } = await supabase\r\n      .from('jjim')\r\n      .select('*')\r\n      .eq('pid', data.pid)\r\n      .eq('uid', data.uid);\r\n\r\n    if (isJjimError) {\r\n      console.log('Error fetching jjim:', isJjimError);\r\n      alert('에러가 발생했습니다.' + isJjimError);\r\n      return false;\r\n    }\r\n\r\n    if (isJjim.length > 0) {\r\n      const { error: deleteError } = await supabase.from('jjim').delete().eq('pid', data.pid).eq('uid', data.uid);\r\n\r\n      if (deleteError) {\r\n        console.log('Error deleting jjim:', deleteError);\r\n        alert('에러가 발생했습니다.' + deleteError);\r\n        return false;\r\n      }\r\n      alert('찜을 취소하셨습니다.');\r\n      return true;\r\n    } else {\r\n      const { error: insertError } = await supabase.from('jjim').insert([{ pid: data.pid, uid: data.uid }]);\r\n\r\n      if (insertError) {\r\n        console.log('Error inserting jjim:', insertError);\r\n        alert('에러가 발생했습니다.' + insertError);\r\n        return false;\r\n      }\r\n      alert('찜 하셨습니다.');\r\n      return true;\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    alert('알 수 없는 오류가 발생했습니다.');\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
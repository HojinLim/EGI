{"ast":null,"code":"import { supabase } from './supabase';\nexport const fetchComments = async pid => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('comments').select('*').order('created_at', {\n      ascending: true\n    }).eq('pid', pid);\n    if (error) {\n      console.log('Error fetching comments:', error);\n      alert('에러가 발생했습니다.' + error);\n      return [];\n    }\n    return data;\n  } catch (e) {\n    console.log(e);\n    alert('알 수 없는 오류가 발생했습니다.');\n    return [];\n  }\n};\nexport const addComment = async comment => {\n  try {\n    const {\n      error\n    } = await supabase.from('comments').insert([comment]);\n    if (error) {\n      console.log('Error inserting comment:', error);\n      alert('댓글 작성 중 에러가 발생했습니다.');\n    } else {\n      alert('댓글이 성공적으로 작성되었습니다.');\n    }\n  } catch (e) {\n    console.log('Error inserting comment:', e);\n    alert('알 수 없는 오류가 발생했습니다.');\n  }\n};\nexport const updateComment = async comment => {\n  try {\n    const {\n      error\n    } = await supabase.from('comments').update({\n      body: comment.body\n    }).eq('cid', comment.cid);\n    if (error) {\n      console.log(error);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// isDeleted로 변경할까?\nexport const deleteComment = async cid => {\n  try {\n    const {\n      error\n    } = await supabase.from('comments').delete().eq('cid', cid);\n    if (error) {\n      console.log('Error deleting comment' + error);\n      alert('댓글 삭제 중 오류가 발생했습니다.');\n    } else {\n      alert('삭제가 완료되었습니다.');\n    }\n  } catch (e) {\n    console.log('Error deleting comment');\n    alert('댓글 삭제 중 오류가 발생했습니다.');\n  }\n};","map":{"version":3,"names":["supabase","fetchComments","pid","data","error","from","select","order","ascending","eq","console","log","alert","e","addComment","comment","insert","updateComment","update","body","cid","deleteComment","delete"],"sources":["C:/React/team_one/src/services/supabase/comments.ts"],"sourcesContent":["import { CommentType } from '../../types/supabase';\r\nimport { supabase } from './supabase';\r\n\r\nexport const fetchComments = async (pid: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('comments')\r\n      .select('*')\r\n      .order('created_at', { ascending: true })\r\n      .eq('pid', pid);\r\n    if (error) {\r\n      console.log('Error fetching comments:', error);\r\n      alert('에러가 발생했습니다.' + error);\r\n      return [];\r\n    }\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n    alert('알 수 없는 오류가 발생했습니다.');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addComment = async (comment: Omit<CommentType, 'cid'>) => {\r\n  try {\r\n    const { error } = await supabase.from('comments').insert([comment]);\r\n    if (error) {\r\n      console.log('Error inserting comment:', error);\r\n      alert('댓글 작성 중 에러가 발생했습니다.');\r\n    } else {\r\n      alert('댓글이 성공적으로 작성되었습니다.');\r\n    }\r\n  } catch (e) {\r\n    console.log('Error inserting comment:', e);\r\n    alert('알 수 없는 오류가 발생했습니다.');\r\n  }\r\n};\r\n\r\nexport const updateComment = async (comment: Pick<CommentType, 'cid' | 'body'>) => {\r\n  try {\r\n    const { error } = await supabase.from('comments').update({ body: comment.body }).eq('cid', comment.cid);\r\n    if (error) {\r\n      console.log(error);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// isDeleted로 변경할까?\r\nexport const deleteComment = async (cid: number) => {\r\n  try {\r\n    const { error } = await supabase.from('comments').delete().eq('cid', cid);\r\n    if (error) {\r\n      console.log('Error deleting comment' + error);\r\n      alert('댓글 삭제 중 오류가 발생했습니다.');\r\n    } else {\r\n      alert('삭제가 완료되었습니다.');\r\n    }\r\n  } catch (e) {\r\n    console.log('Error deleting comment');\r\n    alert('댓글 삭제 중 오류가 발생했습니다.');\r\n  }\r\n};\r\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,MAAMC,aAAa,GAAG,MAAOC,GAAW,IAAK;EAClD,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC,CACxCC,EAAE,CAAC,KAAK,EAAEP,GAAG,CAAC;IACjB,IAAIE,KAAK,EAAE;MACTM,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEP,KAAK,CAAC;MAC9CQ,KAAK,CAAC,aAAa,GAAGR,KAAK,CAAC;MAC5B,OAAO,EAAE;IACX;IACA,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOU,CAAC,EAAE;IACVH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;IACdD,KAAK,CAAC,oBAAoB,CAAC;IAC3B,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,OAAiC,IAAK;EACrE,IAAI;IACF,MAAM;MAAEX;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,UAAU,CAAC,CAACW,MAAM,CAAC,CAACD,OAAO,CAAC,CAAC;IACnE,IAAIX,KAAK,EAAE;MACTM,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEP,KAAK,CAAC;MAC9CQ,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,MAAM;MACLA,KAAK,CAAC,oBAAoB,CAAC;IAC7B;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVH,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,CAAC,CAAC;IAC1CD,KAAK,CAAC,oBAAoB,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAOF,OAA0C,IAAK;EACjF,IAAI;IACF,MAAM;MAAEX;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,UAAU,CAAC,CAACa,MAAM,CAAC;MAAEC,IAAI,EAAEJ,OAAO,CAACI;IAAK,CAAC,CAAC,CAACV,EAAE,CAAC,KAAK,EAAEM,OAAO,CAACK,GAAG,CAAC;IACvG,IAAIhB,KAAK,EAAE;MACTM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;IACpB;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EACpB;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,aAAa,GAAG,MAAOD,GAAW,IAAK;EAClD,IAAI;IACF,MAAM;MAAEhB;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,UAAU,CAAC,CAACiB,MAAM,CAAC,CAAC,CAACb,EAAE,CAAC,KAAK,EAAEW,GAAG,CAAC;IACzE,IAAIhB,KAAK,EAAE;MACTM,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAGP,KAAK,CAAC;MAC7CQ,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,MAAM;MACLA,KAAK,CAAC,cAAc,CAAC;IACvB;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVH,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCC,KAAK,CAAC,qBAAqB,CAAC;EAC9B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
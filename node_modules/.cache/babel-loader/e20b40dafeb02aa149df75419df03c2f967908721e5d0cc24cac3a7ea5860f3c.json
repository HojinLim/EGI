{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\Post.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const navigate = useNavigate();\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const handleAddPost = async () => {\n    if (!newTitle.trim() || !newBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    const imageUrls = [];\n    for (const selectedImage of selectedImages) {\n      const {\n        data: existingImage\n      } = await supabase.from('image_metadata').select('public_url').eq('name', selectedImage.name).single();\n      if (existingImage) {\n        imageUrls.push(existingImage.public_url); // 이미지가 이미 존재할 경우 URL 추가\n      } else {\n        const {\n          data,\n          error\n        } = await supabase.storage.from('1st').upload(`images/${selectedImage.name}`, selectedImage);\n        if (error) {\n          console.error('Error uploading image to Supabase storage:', error);\n          alert('이미지 업로드 중 에러가 발생했습니다!');\n          return;\n        }\n        const imageUrl = data.path;\n        await supabase.from('image_metadata').upsert([{\n          name: selectedImage.name,\n          public_url: imageUrl\n        }]);\n        imageUrls.push(imageUrl); // 이미지가 업로드된 경우 URL 추가\n      }\n    }\n\n    const {\n      error: insertError\n    } = await supabase.from('posts').insert([{\n      title: newTitle,\n      body: newBody,\n      image_urls: imageUrls\n    }]);\n    if (insertError) {\n      console.error('Error adding post:', insertError);\n      alert('에러가 발생했습니다!');\n      return;\n    }\n    setNewTitle('');\n    setNewBody('');\n    setSelectedImages([]);\n    alert('글 작성이 완료되었습니다.');\n    navigate(`/`);\n  };\n  const handleImageChange = e => {\n    const selectedFiles = Array.from(e.target.files || []);\n    const newSelectedImages = selectedFiles.map(selectedFile => {\n      const originalFileName = selectedFile.name;\n      const fileExtension = originalFileName.split('.').pop();\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\n      return new File([selectedFile], randomFileName);\n    });\n    setSelectedImages(prevSelectedImages => [...prevSelectedImages, ...newSelectedImages]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        value: newBody,\n        onChange: content => setNewBody(content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPost,\n        children: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"I2Cfbkjbpj42N+ND6a50+mP2TXw=\", false, function () {\n  return [useNavigate];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","Post","_s","navigate","newTitle","setNewTitle","newBody","setNewBody","selectedImages","setSelectedImages","handleAddPost","trim","alert","imageUrls","selectedImage","data","existingImage","from","select","eq","name","single","push","public_url","error","storage","upload","console","imageUrl","path","upsert","insertError","insert","title","body","image_urls","handleImageChange","e","selectedFiles","Array","target","files","newSelectedImages","map","selectedFile","originalFileName","fileExtension","split","pop","isEnglishFileName","test","randomFileName","File","prevSelectedImages","children","type","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","content","accept","multiple","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/Post.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newBody, setNewBody] = useState('');\r\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\r\n\r\n  const handleAddPost = async () => {\r\n    if (!newTitle.trim() || !newBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const imageUrls = [];\r\n\r\n    for (const selectedImage of selectedImages) {\r\n      const { data: existingImage } = await supabase\r\n        .from('image_metadata')\r\n        .select('public_url')\r\n        .eq('name', selectedImage.name)\r\n        .single();\r\n\r\n      if (existingImage) {\r\n        imageUrls.push(existingImage.public_url); // 이미지가 이미 존재할 경우 URL 추가\r\n      } else {\r\n        const { data, error } = await supabase.storage\r\n          .from('1st')\r\n          .upload(`images/${selectedImage.name}`, selectedImage);\r\n\r\n        if (error) {\r\n          console.error('Error uploading image to Supabase storage:', error);\r\n          alert('이미지 업로드 중 에러가 발생했습니다!');\r\n          return;\r\n        }\r\n\r\n        const imageUrl = data.path;\r\n\r\n        await supabase.from('image_metadata').upsert([{ name: selectedImage.name, public_url: imageUrl }]);\r\n\r\n        imageUrls.push(imageUrl); // 이미지가 업로드된 경우 URL 추가\r\n      }\r\n    }\r\n\r\n    const { error: insertError } = await supabase\r\n      .from('posts')\r\n      .insert([{ title: newTitle, body: newBody, image_urls: imageUrls }]);\r\n\r\n    if (insertError) {\r\n      console.error('Error adding post:', insertError);\r\n      alert('에러가 발생했습니다!');\r\n      return;\r\n    }\r\n\r\n    setNewTitle('');\r\n    setNewBody('');\r\n    setSelectedImages([]);\r\n    alert('글 작성이 완료되었습니다.');\r\n    navigate(`/`);\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = Array.from(e.target.files || []);\r\n\r\n    const newSelectedImages = selectedFiles.map((selectedFile) => {\r\n      const originalFileName = selectedFile.name;\r\n      const fileExtension = originalFileName.split('.').pop();\r\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\r\n\r\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\r\n\r\n      return new File([selectedFile], randomFileName);\r\n    });\r\n\r\n    setSelectedImages((prevSelectedImages) => [...prevSelectedImages, ...newSelectedImages]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Title\" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\r\n        <Editor value={newBody} onChange={(content) => setNewBody(content)} />\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageChange} />\r\n        <button onClick={handleAddPost}>글 작성하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\EditPost.tsx\",\n  _s = $RefreshSig$();\n// EditPost.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPost = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [editBody, setEditBody] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  useEffect(() => {\n    async function fetchPost() {\n      const {\n        data: posts,\n        error\n      } = await supabase.from('posts').select('*').eq('pid', id).single();\n      if (error) {\n        console.error('Error fetching post:', error);\n      } else {\n        setPost(posts);\n        setEditTitle(posts.title);\n        setEditBody(posts.body);\n      }\n    }\n    fetchPost();\n  }, []);\n  const handleEditPost = async () => {\n    if (!editTitle.trim() || !editBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    const updatedImageUrls = [];\n    for (let i = 0; i < selectedImages.length; i++) {\n      const selectedImage = selectedImages[i];\n      const imagePath = `images/${selectedImage.name}`;\n      const {\n        data,\n        error: uploadError\n      } = await supabase.storage.from('1st').upload(imagePath, selectedImage);\n      if (uploadError) {\n        console.error('Error uploading image to Supabase storage:', uploadError);\n        alert('이미지 업로드 중 에러가 발생했습니다!');\n        return;\n      }\n      updatedImageUrls.push(data.path);\n    }\n    const {\n      error\n    } = await supabase.from('posts').update({\n      title: editTitle,\n      body: editBody,\n      image_urls: updatedImageUrls\n    }) // Update image_urls\n    .eq('pid', post === null || post === void 0 ? void 0 : post.pid);\n    if (error) {\n      console.error('Error editing post:', error);\n      alert('에러가 발생했습니다!');\n    } else {\n      alert('글 수정이 완료되었습니다.');\n      navigate(-1);\n    }\n  };\n  const handleImageChange = e => {\n    const selectedFiles = e.target.files;\n    if (selectedFiles) {\n      const newImages = Array.from(selectedFiles).map(file => {\n        const originalFileName = file.name;\n        const fileExtension = originalFileName.split('.').pop();\n        const randomFileName = uuidv4() + '.' + fileExtension;\n        return new File([file], randomFileName);\n      });\n      setSelectedImages(newImages);\n    }\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), selectedImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(image),\n        alt: `Image ${index}`,\n        style: {\n          maxWidth: '100%'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: editTitle,\n        onChange: e => setEditTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        value: editBody,\n        onChange: content => setEditBody(content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEditPost,\n        children: \"\\uC218\\uC815\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPost, \"IZMCR55peRDwyUvDwFJoE1Ff5Fk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","EditPost","_s","id","navigate","post","setPost","editTitle","setEditTitle","editBody","setEditBody","selectedImages","setSelectedImages","fetchPost","data","posts","error","from","select","eq","single","console","title","body","handleEditPost","trim","alert","updatedImageUrls","i","length","selectedImage","imagePath","name","uploadError","storage","upload","push","path","update","image_urls","pid","handleImageChange","e","selectedFiles","target","files","newImages","Array","map","file","originalFileName","fileExtension","split","pop","randomFileName","File","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flex","type","accept","multiple","onChange","image","index","src","URL","createObjectURL","alt","maxWidth","placeholder","value","content","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/EditPost.tsx"],"sourcesContent":["// EditPost.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Post } from '../../types/supabase';\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst EditPost = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState<Post | null>(null);\r\n  const [editTitle, setEditTitle] = useState('');\r\n  const [editBody, setEditBody] = useState('');\r\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchPost() {\r\n      const { data: posts, error } = await supabase.from('posts').select('*').eq('pid', id).single();\r\n      if (error) {\r\n        console.error('Error fetching post:', error);\r\n      } else {\r\n        setPost(posts);\r\n        setEditTitle(posts.title);\r\n        setEditBody(posts.body);\r\n      }\r\n    }\r\n\r\n    fetchPost();\r\n  }, []);\r\n\r\n  const handleEditPost = async () => {\r\n    if (!editTitle.trim() || !editBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const updatedImageUrls: string[] = [];\r\n\r\n    for (let i = 0; i < selectedImages.length; i++) {\r\n      const selectedImage = selectedImages[i];\r\n      const imagePath = `images/${selectedImage.name}`;\r\n\r\n      const { data, error: uploadError } = await supabase.storage.from('1st').upload(imagePath, selectedImage);\r\n\r\n      if (uploadError) {\r\n        console.error('Error uploading image to Supabase storage:', uploadError);\r\n        alert('이미지 업로드 중 에러가 발생했습니다!');\r\n        return;\r\n      }\r\n\r\n      updatedImageUrls.push(data.path);\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('posts')\r\n      .update({ title: editTitle, body: editBody, image_urls: updatedImageUrls }) // Update image_urls\r\n      .eq('pid', post?.pid);\r\n\r\n    if (error) {\r\n      console.error('Error editing post:', error);\r\n      alert('에러가 발생했습니다!');\r\n    } else {\r\n      alert('글 수정이 완료되었습니다.');\r\n      navigate(-1);\r\n    }\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n\r\n    if (selectedFiles) {\r\n      const newImages: File[] = Array.from(selectedFiles).map((file) => {\r\n        const originalFileName = file.name;\r\n        const fileExtension = originalFileName.split('.').pop();\r\n        const randomFileName = uuidv4() + '.' + fileExtension;\r\n        return new File([file], randomFileName);\r\n      });\r\n\r\n      setSelectedImages(newImages);\r\n    }\r\n  };\r\n\r\n  if (!post) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <div style={{ flex: 1 }}>\r\n        <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageChange} />\r\n        {/* 이미지 미리보기 */}\r\n        {selectedImages.map((image, index) => (\r\n          <img key={index} src={URL.createObjectURL(image)} alt={`Image ${index}`} style={{ maxWidth: '100%' }} />\r\n        ))}\r\n      </div>\r\n      <div style={{ flex: 2 }}>\r\n        <input type=\"text\" placeholder=\"Title\" value={editTitle} onChange={(e) => setEditTitle(e.target.value)} />\r\n        <Editor value={editBody} onChange={(content) => setEditBody(content)} />\r\n        <br />\r\n        <button onClick={handleEditPost}>수정하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
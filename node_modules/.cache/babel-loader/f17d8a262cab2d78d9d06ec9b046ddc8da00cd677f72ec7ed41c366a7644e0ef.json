{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\EditPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { handleImageChange } from './HandleImage';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPost = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [editBody, setEditBody] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [location, setLocation] = useState('');\n  const [price, setPrice] = useState('');\n  const [category, setCategory] = useState('');\n  useEffect(() => {\n    const fetchPost = async () => {\n      const {\n        data: posts,\n        error\n      } = await supabase.from('posts').select('*').eq('pid', id).single();\n      if (error) {\n        console.error('Error fetching post:', error);\n      } else {\n        setPost(posts);\n        setEditTitle(posts.title);\n        setEditBody(posts.body);\n        setLocation(posts.location);\n      }\n    };\n    fetchPost();\n  }, [id]);\n  const handleEditPost = async () => {\n    if (!editTitle.trim() || !editBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    let imageUrls = post ? post.image_urls : []; // 기존 이미지 유지\n\n    if (selectedImages.length > 0) {\n      const newImageUrls = [];\n      for (const selectedImage of selectedImages) {\n        const {\n          data,\n          error\n        } = await supabase.storage.from('1st').upload(`images/${selectedImage.name}`, selectedImage);\n        if (error) {\n          console.error('Error uploading image to Supabase storage:', error);\n          alert('이미지 업로드 중 에러가 발생했습니다!');\n          return;\n        }\n        newImageUrls.push(data.path);\n      }\n      imageUrls = newImageUrls;\n    }\n    if (post && editTitle && editBody) {\n      const {\n        error\n      } = await supabase.from('posts').update({\n        title: editTitle,\n        body: editBody,\n        image_urls: imageUrls,\n        price,\n        location,\n        category\n      }).eq('pid', post.pid);\n      if (error) {\n        console.error('Error editing post:', error);\n        alert('에러가 발생했습니다!');\n      } else {\n        alert('글 수정이 완료되었습니다.');\n        navigate(-1);\n      }\n    }\n  };\n  const handleImageChangeWrapper = e => {\n    const selectedFiles = e.target.files;\n    if (selectedFiles) {\n      const updatedSelectedImages = handleImageChange(selectedFiles);\n      setSelectedImages(updatedSelectedImages);\n    }\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: editTitle,\n      onChange: e => setEditTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      value: editBody,\n      onChange: content => setEditBody(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      multiple: true,\n      onChange: handleImageChangeWrapper\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEditPost,\n      children: \"\\uC218\\uC815\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPost, \"kycTpjT7TwAQ0PxzI8IsrFshliA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Editor","handleImageChange","supabase","jsxDEV","_jsxDEV","EditPost","_s","id","navigate","post","setPost","editTitle","setEditTitle","editBody","setEditBody","selectedImages","setSelectedImages","location","setLocation","price","setPrice","category","setCategory","fetchPost","data","posts","error","from","select","eq","single","console","title","body","handleEditPost","trim","alert","imageUrls","image_urls","length","newImageUrls","selectedImage","storage","upload","name","push","path","update","pid","handleImageChangeWrapper","e","selectedFiles","target","files","updatedSelectedImages","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","content","accept","multiple","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/EditPost.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\n\r\nimport { handleImageChange } from './HandleImage';\r\nimport { Post } from '../../types/supabase';\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst EditPost = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState<Post | null>(null);\r\n  const [editTitle, setEditTitle] = useState('');\r\n  const [editBody, setEditBody] = useState('');\r\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\r\n  const [location, setLocation] = useState('');\r\n  const [price, setPrice] = useState('');\r\n  const [category, setCategory] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      const { data: posts, error } = await supabase.from('posts').select('*').eq('pid', id).single();\r\n      if (error) {\r\n        console.error('Error fetching post:', error);\r\n      } else {\r\n        setPost(posts);\r\n        setEditTitle(posts.title);\r\n        setEditBody(posts.body);\r\n        setLocation(posts.location);\r\n      }\r\n    };\r\n\r\n    fetchPost();\r\n  }, [id]);\r\n\r\n  const handleEditPost = async () => {\r\n    if (!editTitle.trim() || !editBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    let imageUrls: string[] = post ? post.image_urls : []; // 기존 이미지 유지\r\n\r\n    if (selectedImages.length > 0) {\r\n      const newImageUrls: string[] = [];\r\n\r\n      for (const selectedImage of selectedImages) {\r\n        const { data, error } = await supabase.storage\r\n          .from('1st')\r\n          .upload(`images/${selectedImage.name}`, selectedImage);\r\n\r\n        if (error) {\r\n          console.error('Error uploading image to Supabase storage:', error);\r\n          alert('이미지 업로드 중 에러가 발생했습니다!');\r\n          return;\r\n        }\r\n\r\n        newImageUrls.push(data.path);\r\n      }\r\n\r\n      imageUrls = newImageUrls;\r\n    }\r\n\r\n    if (post && editTitle && editBody) {\r\n      const { error } = await supabase\r\n        .from('posts')\r\n        .update({ title: editTitle, body: editBody, image_urls: imageUrls, price, location, category })\r\n        .eq('pid', post.pid);\r\n\r\n      if (error) {\r\n        console.error('Error editing post:', error);\r\n        alert('에러가 발생했습니다!');\r\n      } else {\r\n        alert('글 수정이 완료되었습니다.');\r\n        navigate(-1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImageChangeWrapper = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n\r\n    if (selectedFiles) {\r\n      const updatedSelectedImages = handleImageChange(selectedFiles);\r\n      setSelectedImages(updatedSelectedImages);\r\n    }\r\n  };\r\n\r\n  if (!post) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" placeholder=\"Title\" value={editTitle} onChange={(e) => setEditTitle(e.target.value)} />\r\n      <Editor value={editBody} onChange={(content) => setEditBody(content)} />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageChangeWrapper} />\r\n      <button onClick={handleEditPost}>수정하기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
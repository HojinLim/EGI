{"ast":null,"code":"// auth.ts\n\nimport { supabase } from './supabase';\n\n// 회원가입\nexport const signUpService = async userData => {\n  try {\n    var _data$user;\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email: userData.email,\n      password: userData.password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    let profileImgUrl = '';\n    if (userData.profileimg) {\n      var _userData$profileimg;\n      const profileImgFile = new File([userData.profileimg], (_userData$profileimg = userData.profileimg) === null || _userData$profileimg === void 0 ? void 0 : _userData$profileimg.name);\n      const uploadData = await uploadProfileImage(profileImgFile);\n      profileImgUrl = uploadData.path;\n    }\n    const userInsertData = {\n      uid: (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id,\n      nickname: userData.nickname,\n      profileimg: profileImgUrl,\n      email: userData.email\n    };\n    const {\n      error: insertError\n    } = await supabase.from('users').insert(userInsertData);\n    if (insertError) {\n      throw new Error(insertError.message);\n    }\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n// 로그아웃\nexport const sigOutService = async () => {\n  try {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error(error.message);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// 로그인\nexport const loginService = async userData => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email: userData.email,\n      password: userData.password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// 유저 정보 조회\nexport const getUserInfo = async userEmail => {\n  try {\n    const {\n      data: userData,\n      error\n    } = await supabase.from('users').select('uid, email, nickname, profileimg').eq('email', userEmail);\n    if (error) {\n      throw new Error(error.message);\n    }\n    if (userData && userData.length > 0) {\n      return userData[0];\n    }\n    return null;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n// 아이디 중복 확인\nexport async function checkEmailDuplication(email) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('email').eq('email', email);\n    if (error) {\n      throw error;\n    }\n    return data.length > 0;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n// 비밀번호 찾기\nexport const resetPassword = async email => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.resetPasswordForEmail(email);\n    console.log(data);\n    if (!error) {\n      alert('Please check your email');\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// 닉네임 변경 및 회원 정보 변경\nexport const updateUserInfo = async (userEmail, newNickname) => {\n  try {\n    const {\n      data: userData,\n      error\n    } = await supabase.from('users').update({\n      nickname: newNickname\n    }).eq('email', userEmail);\n    if (error) {\n      throw new Error(error.message);\n    }\n    if (userData !== null) {\n      if (Array.isArray(userData) && userData > 0) {\n        // 변경된 회원 정보 반환 혹은 필요한 작업 수행\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n// 이미지 파일 업로드\nexport const uploadProfileImage = async selectedProfileImg => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('1st').upload(`profileimgs/${selectedProfileImg.name}`, selectedProfileImg);\n    if (error) {\n      throw new Error(error.message);\n    }\n    console.log('profileImgFile', selectedProfileImg);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","signUpService","userData","_data$user","data","error","auth","signUp","email","password","Error","message","profileImgUrl","profileimg","_userData$profileimg","profileImgFile","File","name","uploadData","uploadProfileImage","path","userInsertData","uid","user","id","nickname","insertError","from","insert","console","log","sigOutService","signOut","loginService","signInWithPassword","getUserInfo","userEmail","select","eq","length","checkEmailDuplication","resetPassword","resetPasswordForEmail","alert","updateUserInfo","newNickname","update","Array","isArray","selectedProfileImg","storage","upload"],"sources":["C:/React/team_one/src/services/supabase/auth.ts"],"sourcesContent":["// auth.ts\r\nimport { UserType } from '../../types/supabase';\r\nimport { supabase } from './supabase';\r\n\r\n// 회원가입\r\nexport const signUpService = async (userData: UserType) => {\r\n  \r\n  try {\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email: userData.email,\r\n      password: userData.password\r\n    });\r\n\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n    let profileImgUrl = '';\r\n\r\n    if (userData.profileimg) {\r\n      const profileImgFile = new File([userData.profileimg], userData.profileimg?.name);\r\n      const uploadData = await uploadProfileImage(profileImgFile);\r\n      profileImgUrl = uploadData.path;\r\n    }\r\n    const userInsertData = {\r\n      uid: data.user?.id,\r\n      nickname: userData.nickname,\r\n      profileimg: profileImgUrl,\r\n      email: userData.email\r\n    };\r\n\r\n    const { error: insertError } = await supabase.from('users').insert(userInsertData);\r\n    if (insertError) {\r\n      throw new Error(insertError.message);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 로그아웃\r\nexport const sigOutService = async () => {\r\n  try {\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 로그인\r\nexport const loginService = async (userData: Omit<UserType, 'nickname' | 'profileImg'>) => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email: userData.email,\r\n      password: userData.password\r\n    });\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 유저 정보 조회\r\nexport const getUserInfo = async (userEmail: string): Promise<Omit<UserType, 'password'> | null> => {\r\n  try {\r\n    const { data: userData, error } = await supabase\r\n      .from('users')\r\n      .select('uid, email, nickname, profileimg')\r\n      .eq('email', userEmail);\r\n\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    if (userData && userData.length > 0) {\r\n      return userData[0];\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n// 아이디 중복 확인\r\nexport async function checkEmailDuplication(email: string): Promise<boolean> {\r\n  try {\r\n    const { data, error } = await supabase.from('users').select('email').eq('email', email);\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    return data.length > 0;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// 비밀번호 찾기\r\nexport const resetPassword = async (email: string) => {\r\n  try {\r\n    const { data, error } = await supabase.auth.resetPasswordForEmail(email);\r\n    console.log(data);\r\n    if (!error) {\r\n      alert('Please check your email');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n// 닉네임 변경 및 회원 정보 변경\r\nexport const updateUserInfo = async (userEmail: string, newNickname: string): Promise<void> => {\r\n  try {\r\n    const { data: userData, error } = await supabase\r\n      .from('users')\r\n      .update({ nickname: newNickname })\r\n      .eq('email', userEmail);\r\n\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    if (userData !== null) {\r\n      if (Array.isArray(userData) && userData > 0) {\r\n        // 변경된 회원 정보 반환 혹은 필요한 작업 수행\r\n        \r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// 이미지 파일 업로드\r\nexport const uploadProfileImage = async (selectedProfileImg: File) => {\r\n  try {\r\n    const { data, error } = await supabase.storage\r\n      .from('1st')\r\n      .upload(`profileimgs/${selectedProfileImg.name}`, selectedProfileImg);\r\n    if (error) {\r\n      throw new Error(error.message);\r\n    }\r\n    console.log('profileImgFile', selectedProfileImg);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
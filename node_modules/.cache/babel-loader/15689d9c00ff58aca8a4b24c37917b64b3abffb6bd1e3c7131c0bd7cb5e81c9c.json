{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\GetPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport * as S from './Styled.Posts';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetPost = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const supabaseStorageUrl = process.env.REACT_APP_SUPABASE_STORAGE_URL;\n  useEffect(() => {\n    async function fetchPosts() {\n      const {\n        data,\n        error\n      } = await supabase.from('posts').select('*');\n      if (error) {\n        console.error('Error fetching posts:', error);\n      } else {\n        setPosts(data);\n      }\n    }\n    fetchPosts();\n  }, []);\n  const extractFirstImageUrl = urlString => {\n    try {\n      const urlArray = JSON.parse(urlString);\n      return urlArray.length > 0 ? urlArray[0].replace(/[\"[\\]]/g, '') : undefined;\n    } catch (error) {\n      console.error('Error extracting image URLs:', error);\n      return undefined;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(S.PostContainer, {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(NavLink, {\n      to: `/post/${post.pid}`,\n      style: {\n        textDecoration: 'none',\n        color: 'inherit'\n      },\n      children: /*#__PURE__*/_jsxDEV(S.PostItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: extractFirstImageUrl(post.image_urls) && /*#__PURE__*/_jsxDEV(S.Image, {\n            src: `${supabaseStorageUrl}${extractFirstImageUrl(post.image_urls)}`,\n            alt: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, post.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(GetPost, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = GetPost;\nexport default GetPost;\nvar _c;\n$RefreshReg$(_c, \"GetPost\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","S","supabase","jsxDEV","_jsxDEV","GetPost","_s","posts","setPosts","supabaseStorageUrl","process","env","REACT_APP_SUPABASE_STORAGE_URL","fetchPosts","data","error","from","select","console","extractFirstImageUrl","urlString","urlArray","JSON","parse","length","replace","undefined","PostContainer","children","map","post","to","pid","style","textDecoration","color","PostItem","title","fileName","_jsxFileName","lineNumber","columnNumber","image_urls","Image","src","alt","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/GetPost.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport * as S from './Styled.Posts';\r\nimport { Post } from '../../types/supabase';\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst GetPost = () => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n\r\n  const supabaseStorageUrl = process.env.REACT_APP_SUPABASE_STORAGE_URL;\r\n\r\n  useEffect(() => {\r\n    async function fetchPosts() {\r\n      const { data, error } = await supabase.from('posts').select('*');\r\n\r\n      if (error) {\r\n        console.error('Error fetching posts:', error);\r\n      } else {\r\n        setPosts(data);\r\n      }\r\n    }\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  const extractFirstImageUrl = (urlString: string): string | undefined => {\r\n    try {\r\n      const urlArray: string[] = JSON.parse(urlString);\r\n      return urlArray.length > 0 ? urlArray[0].replace(/[\"[\\]]/g, '') : undefined;\r\n    } catch (error) {\r\n      console.error('Error extracting image URLs:', error);\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <S.PostContainer>\r\n      {posts.map((post) => (\r\n        <NavLink to={`/post/${post.pid}`} key={post.pid} style={{ textDecoration: 'none', color: 'inherit' }}>\r\n          <S.PostItem>\r\n            <h2>{post.title}</h2>\r\n            <div>\r\n              {/* Assuming the post.image_urls is a string */}\r\n              {extractFirstImageUrl(post.image_urls) && (\r\n                <S.Image src={`${supabaseStorageUrl}${extractFirstImageUrl(post.image_urls)}`} alt={post.title} />\r\n              )}\r\n            </div>\r\n          </S.PostItem>\r\n        </NavLink>\r\n      ))}\r\n    </S.PostContainer>\r\n  );\r\n};\r\n\r\nexport default GetPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\GetPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport * as S from './Styled.Posts';\nimport { supabase } from '../../services/supabase/supabase';\nimport { filterdcategories } from '../category/Category';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GetPost = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const postsPerPage = 10; // 한 번에 가져올 포스트 수\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('posts').select('*').range((currentPage - 1) * postsPerPage, currentPage * postsPerPage - 1);\n      if (error) {\n        console.error('Error fetching posts:', error);\n      } else {\n        const postsWithCompleteURLs = data.map(post => ({\n          ...post,\n          image_urls: post.image_urls ? post.image_urls.replace(/\\[|\\]|\"/g, '').split(',') : []\n        }));\n        setPosts(prevPosts => [...prevPosts, ...postsWithCompleteURLs]);\n        setFilteredPosts(prevFilteredPosts => [...prevFilteredPosts, ...postsWithCompleteURLs]);\n      }\n    };\n    fetchPosts();\n  }, [currentPage]);\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight && filteredPosts.length < posts.length) {\n        setCurrentPage(prevPage => prevPage + 1);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [filteredPosts, posts]);\n  const handleCategoryClick = category => {\n    if (category === '전체') {\n      setFilteredPosts(posts);\n    } else {\n      const filteredPosts = posts.filter(post => post.category === category);\n      setFilteredPosts(filteredPosts);\n    }\n  };\n  const categoryButtons = filterdcategories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n    value: category.value,\n    onClick: () => handleCategoryClick(category.value),\n    children: category.label\n  }, category.value, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(S.PostContainer, {\n      children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(NavLink, {\n        to: `/post/${post.pid}`,\n        style: {\n          textDecoration: 'none',\n          color: 'inherit'\n        },\n        children: /*#__PURE__*/_jsxDEV(S.PostItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: post.image_urls.length > 0 && /*#__PURE__*/_jsxDEV(S.Image, {\n              src: `${process.env.REACT_APP_SUPABASE_STORAGE_URL}${post.image_urls[0]} `,\n              alt: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, post.pid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GetPost, \"76oncguJr+h+Yrq7AAXHsWktIgk=\");\n_c = GetPost;\nexport default GetPost;\nvar _c;\n$RefreshReg$(_c, \"GetPost\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","S","supabase","filterdcategories","jsxDEV","_jsxDEV","Fragment","_Fragment","GetPost","_s","posts","setPosts","filteredPosts","setFilteredPosts","currentPage","setCurrentPage","postsPerPage","fetchPosts","data","error","from","select","range","console","postsWithCompleteURLs","map","post","image_urls","replace","split","prevPosts","prevFilteredPosts","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","length","prevPage","addEventListener","removeEventListener","handleCategoryClick","category","filter","categoryButtons","value","onClick","children","label","fileName","_jsxFileName","lineNumber","columnNumber","PostContainer","to","pid","style","textDecoration","color","PostItem","title","Image","src","process","env","REACT_APP_SUPABASE_STORAGE_URL","alt","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/GetPost.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport * as S from './Styled.Posts';\r\nimport { Post } from '../../types/supabase';\r\nimport { supabase } from '../../services/supabase/supabase';\r\nimport { filterdcategories } from '../category/Category';\r\n\r\nexport const GetPost = () => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n  const [filteredPosts, setFilteredPosts] = useState<Post[]>([]);\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const postsPerPage = 10; // 한 번에 가져올 포스트 수\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      const { data, error } = await supabase\r\n        .from('posts')\r\n        .select('*')\r\n        .range((currentPage - 1) * postsPerPage, currentPage * postsPerPage - 1);\r\n\r\n      if (error) {\r\n        console.error('Error fetching posts:', error);\r\n      } else {\r\n        const postsWithCompleteURLs = data.map((post) => ({\r\n          ...post,\r\n          image_urls: post.image_urls ? post.image_urls.replace(/\\[|\\]|\"/g, '').split(',') : []\r\n        }));\r\n\r\n        setPosts((prevPosts) => [...prevPosts, ...postsWithCompleteURLs]);\r\n        setFilteredPosts((prevFilteredPosts) => [...prevFilteredPosts, ...postsWithCompleteURLs]);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [currentPage]);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight && filteredPosts.length < posts.length) {\r\n        setCurrentPage((prevPage) => prevPage + 1);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [filteredPosts, posts]);\r\n\r\n  const handleCategoryClick = (category: string) => {\r\n    if (category === '전체') {\r\n      setFilteredPosts(posts);\r\n    } else {\r\n      const filteredPosts = posts.filter((post) => post.category === category);\r\n      setFilteredPosts(filteredPosts);\r\n    }\r\n  };\r\n\r\n  const categoryButtons = filterdcategories.map((category) => (\r\n    <button key={category.value} value={category.value} onClick={() => handleCategoryClick(category.value)}>\r\n      {category.label}\r\n    </button>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div>{categoryButtons}</div>\r\n      <S.PostContainer>\r\n        {filteredPosts.map((post) => (\r\n          <NavLink to={`/post/${post.pid}`} key={post.pid} style={{ textDecoration: 'none', color: 'inherit' }}>\r\n            <S.PostItem>\r\n              <h2>{post.title}</h2>\r\n              <div>\r\n                {post.image_urls.length > 0 && (\r\n                  <S.Image\r\n                    src={`${process.env.REACT_APP_SUPABASE_STORAGE_URL}${post.image_urls[0]} `}\r\n                    alt={post.title}\r\n                  />\r\n                )}\r\n              </div>\r\n            </S.PostItem>\r\n          </NavLink>\r\n        ))}\r\n      </S.PostContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
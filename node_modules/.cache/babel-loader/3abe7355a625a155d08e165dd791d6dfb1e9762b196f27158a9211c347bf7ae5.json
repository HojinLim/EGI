{"ast":null,"code":"/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\nexport class NavigatorLockAcquireTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.isAcquireTimeout = true;\n  }\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n  }\n  let beginOperation = null;\n  let rejectOperation = null;\n  const beginOperationPromise = new Promise((accept, reject) => {\n    beginOperation = accept;\n    rejectOperation = reject;\n  });\n  // this lets us preserve stack traces over the operation, which the\n  // navigator.locks.request function does not preserve well still\n  const result = (async () => {\n    await beginOperationPromise;\n    if (internals.debug) {\n      console.log('@supabase/gotrue-js: navigatorLock: operation start');\n    }\n    try {\n      return await fn();\n    } finally {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: operation end');\n      }\n    }\n  })();\n  const abortController = new globalThis.AbortController();\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      beginOperation = null;\n      abortController.abort();\n      if (rejectOperation) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n        }\n        if (rejectOperation) {\n          rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" timed out after ${acquireTimeout}ms`));\n        }\n        beginOperation = null;\n        rejectOperation = null;\n      }\n    }, acquireTimeout);\n  }\n  await globalThis.navigator.locks.request(name, {\n    mode: 'exclusive',\n    ifAvailable: acquireTimeout === 0,\n    signal: abortController.signal\n  }, async lock => {\n    if (lock) {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquired', name);\n      }\n      try {\n        if (beginOperation) {\n          beginOperation();\n          beginOperation = null;\n          rejectOperation = null;\n          await result;\n        }\n      } catch (e) {\n        // not important to handle the error here\n      } finally {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock released', name);\n        }\n      }\n    } else {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock not immediately available', name);\n      }\n      // no lock was available because acquireTimeout === 0\n      const timeout = new Error(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n      timeout.isAcquireTimeout = true;\n      if (rejectOperation) {\n        rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`));\n      }\n      beginOperation = null;\n      rejectOperation = null;\n    }\n  });\n  return await result;\n}","map":{"version":3,"names":["internals","debug","globalThis","localStorage","getItem","NavigatorLockAcquireTimeoutError","Error","constructor","message","isAcquireTimeout","navigatorLock","name","acquireTimeout","fn","console","log","beginOperation","rejectOperation","beginOperationPromise","Promise","accept","reject","result","abortController","AbortController","setTimeout","abort","navigator","locks","request","mode","ifAvailable","signal","lock","e","timeout"],"sources":["C:\\React\\team_one\\.yarn\\cache\\@supabase-gotrue-js-npm-2.46.1-6290d2f0f6-051be5f935.zip\\node_modules\\@supabase\\gotrue-js\\src\\lib\\locks.ts"],"sourcesContent":["/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(\n    globalThis &&\n    globalThis.localStorage &&\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\n  ),\n}\n\nexport class NavigatorLockAcquireTimeoutError extends Error {\n  public readonly isAcquireTimeout = true\n\n  constructor(message: string) {\n    super(message)\n  }\n}\n\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock<R>(\n  name: string,\n  acquireTimeout: number,\n  fn: () => Promise<R>\n): Promise<R> {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\n  }\n\n  let beginOperation: (() => void) | null = null\n  let rejectOperation: ((error: any) => void) | null = null\n  const beginOperationPromise = new Promise<void>((accept, reject) => {\n    beginOperation = accept\n    rejectOperation = reject\n  })\n\n  // this lets us preserve stack traces over the operation, which the\n  // navigator.locks.request function does not preserve well still\n  const result = (async () => {\n    await beginOperationPromise\n\n    if (internals.debug) {\n      console.log('@supabase/gotrue-js: navigatorLock: operation start')\n    }\n\n    try {\n      return await fn()\n    } finally {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: operation end')\n      }\n    }\n  })()\n\n  const abortController = new globalThis.AbortController()\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      beginOperation = null\n      abortController.abort()\n\n      if (rejectOperation) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\n        }\n\n        if (rejectOperation) {\n          rejectOperation(\n            new NavigatorLockAcquireTimeoutError(\n              `Acquiring an exclusive Navigator LockManager lock \"${name}\" timed out after ${acquireTimeout}ms`\n            )\n          )\n        }\n        beginOperation = null\n        rejectOperation = null\n      }\n    }, acquireTimeout)\n  }\n\n  await globalThis.navigator.locks.request(\n    name,\n    {\n      mode: 'exclusive',\n      ifAvailable: acquireTimeout === 0,\n      signal: abortController.signal,\n    },\n    async (lock) => {\n      if (lock) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock acquired', name)\n        }\n\n        try {\n          if (beginOperation) {\n            beginOperation()\n            beginOperation = null\n            rejectOperation = null\n            await result\n          }\n        } catch (e: any) {\n          // not important to handle the error here\n        } finally {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock released', name)\n          }\n        }\n      } else {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock not immediately available', name)\n        }\n\n        // no lock was available because acquireTimeout === 0\n        const timeout: any = new Error(\n          `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n        )\n        timeout.isAcquireTimeout = true\n\n        if (rejectOperation) {\n          rejectOperation(\n            new NavigatorLockAcquireTimeoutError(\n              `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n            )\n          )\n        }\n        beginOperation = null\n        rejectOperation = null\n      }\n    }\n  )\n\n  return await result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
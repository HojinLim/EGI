{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\EditPost.tsx\",\n  _s = $RefreshSig$();\n// EditPost.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport Editor from '../editor/Editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_KEY;\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst EditPost = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [editBody, setEditBody] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null); // State for new selected image\n\n  useEffect(() => {\n    async function fetchPost() {\n      const {\n        data: posts,\n        error\n      } = await supabase.from('posts').select('*').eq('pid', id).single();\n      if (error) {\n        console.error('Error fetching post:', error);\n      } else {\n        setPost(posts);\n        setEditTitle(posts.title);\n        setEditBody(posts.body);\n      }\n    }\n    fetchPost();\n  }, []);\n  const handleEditPost = async () => {\n    if (!editTitle.trim() || !editBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    let updatedImageUrl = post === null || post === void 0 ? void 0 : post.image_url;\n    if (selectedImage) {\n      const {\n        data,\n        error\n      } = await supabase.storage.from('1st').upload(`images/${selectedImage.name}`, selectedImage);\n      if (error) {\n        console.error('Error uploading image to Supabase storage:', error);\n        alert('이미지 업로드 중 에러가 발생했습니다!');\n        return;\n      }\n      updatedImageUrl = data.path;\n    }\n    if (post && editTitle && editBody) {\n      const {\n        error\n      } = await supabase.from('posts').update({\n        title: editTitle,\n        body: editBody,\n        image_url: updatedImageUrl\n      }).eq('pid', post.pid);\n      if (error) {\n        console.error('Error editing post:', error);\n        alert('에러가 발생했습니다!');\n      } else {\n        alert('글 수정이 완료되었습니다.');\n        navigate(-1);\n      }\n    }\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n  const handleImageChange = async e => {\n    const selectedFile = e.target.files && e.target.files[0];\n    if (selectedFile) {\n      setSelectedImage(selectedFile);\n      const existingImageUrl = `${supabaseUrl}/storage/v1/object/1st/images/${selectedFile.name}`;\n\n      // 이미지가 존재하는 경우에만 URL 업데이트\n      const {\n        data: existingImageData,\n        error: existingImageError\n      } = await supabase.storage.from('1st').getPublicUrl(existingImageUrl);\n      if (existingImageError) {\n        console.error('Error getting existing image URL:', existingImageError);\n        return;\n      }\n      if (existingImageData.publicURL) {\n        setPost(prevPost => ({\n          ...prevPost,\n          image_url: existingImageData.publicURL\n        }));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: editTitle,\n      onChange: e => setEditTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      value: editBody,\n      onChange: content => setEditBody(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEditPost,\n      children: \"\\uC218\\uC815\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPost, \"dgk3OQlrDVUkHoijO+zlTeeJ/RY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","createClient","Editor","jsxDEV","_jsxDEV","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_KEY","supabase","EditPost","_s","id","navigate","post","setPost","editTitle","setEditTitle","editBody","setEditBody","selectedImage","setSelectedImage","fetchPost","data","posts","error","from","select","eq","single","console","title","body","handleEditPost","trim","alert","updatedImageUrl","image_url","storage","upload","name","path","update","pid","children","fileName","_jsxFileName","lineNumber","columnNumber","handleImageChange","e","selectedFile","target","files","existingImageUrl","existingImageData","existingImageError","getPublicUrl","publicURL","prevPost","type","placeholder","value","onChange","content","accept","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/EditPost.tsx"],"sourcesContent":["// EditPost.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Editor from '../editor/Editor';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL as string;\r\nconst supabaseKey = process.env.REACT_APP_SUPABASE_KEY as string;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\ninterface Post {\r\n  pid: number;\r\n  title: string;\r\n  body: string;\r\n  image_url: string;\r\n}\r\n\r\nconst EditPost = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState<Post | null>(null);\r\n  const [editTitle, setEditTitle] = useState('');\r\n  const [editBody, setEditBody] = useState('');\r\n  const [selectedImage, setSelectedImage] = useState<File | null>(null); // State for new selected image\r\n\r\n  useEffect(() => {\r\n    async function fetchPost() {\r\n      const { data: posts, error } = await supabase.from('posts').select('*').eq('pid', id).single();\r\n      if (error) {\r\n        console.error('Error fetching post:', error);\r\n      } else {\r\n        setPost(posts);\r\n        setEditTitle(posts.title);\r\n        setEditBody(posts.body);\r\n      }\r\n    }\r\n\r\n    fetchPost();\r\n  }, []);\r\n\r\n  const handleEditPost = async () => {\r\n    if (!editTitle.trim() || !editBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    let updatedImageUrl = post?.image_url;\r\n\r\n    if (selectedImage) {\r\n      const { data, error } = await supabase.storage.from('1st').upload(`images/${selectedImage.name}`, selectedImage);\r\n\r\n      if (error) {\r\n        console.error('Error uploading image to Supabase storage:', error);\r\n        alert('이미지 업로드 중 에러가 발생했습니다!');\r\n        return;\r\n      }\r\n\r\n      updatedImageUrl = data.path;\r\n    }\r\n\r\n    if (post && editTitle && editBody) {\r\n      const { error } = await supabase\r\n        .from('posts')\r\n        .update({ title: editTitle, body: editBody, image_url: updatedImageUrl })\r\n        .eq('pid', post.pid);\r\n\r\n      if (error) {\r\n        console.error('Error editing post:', error);\r\n        alert('에러가 발생했습니다!');\r\n      } else {\r\n        alert('글 수정이 완료되었습니다.');\r\n        navigate(-1);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!post) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files && e.target.files[0];\r\n    if (selectedFile) {\r\n      setSelectedImage(selectedFile);\r\n\r\n      const existingImageUrl = `${supabaseUrl}/storage/v1/object/1st/images/${selectedFile.name}`;\r\n\r\n      // 이미지가 존재하는 경우에만 URL 업데이트\r\n      const { data: existingImageData, error: existingImageError } = await supabase.storage\r\n        .from('1st')\r\n        .getPublicUrl(existingImageUrl);\r\n      if (existingImageError) {\r\n        console.error('Error getting existing image URL:', existingImageError);\r\n        return;\r\n      }\r\n\r\n      if (existingImageData.publicURL) {\r\n        setPost((prevPost) => ({\r\n          ...prevPost!,\r\n          image_url: existingImageData.publicURL\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" placeholder=\"Title\" value={editTitle} onChange={(e) => setEditTitle(e.target.value)} />\r\n      <Editor value={editBody} onChange={(content) => setEditBody(content)} />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      <button onClick={handleEditPost}>수정하기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
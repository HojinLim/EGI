{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\GetPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useAtom } from 'jotai'; // 추가: jotai import\n\nimport * as S from './Styled.Posts';\nimport { supabase } from '../../services/supabase/supabase';\nimport { filterdcategories } from '../category/Category';\nimport { searchKeywordAtom } from '../common/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GetPost = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [searchKeyword] = useAtom(searchKeywordAtom);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('posts').select('*');\n      if (error) {\n        console.error('Error fetching posts:', error);\n      } else {\n        const postsWithCompleteURLs = data.map(post => ({\n          ...post,\n          image_urls: post.image_urls ? post.image_urls.replace(/\\[|\\]|\"/g, '').split(',') : []\n        }));\n        setPosts(postsWithCompleteURLs);\n        setFilteredPosts(postsWithCompleteURLs);\n      }\n    };\n    fetchPosts();\n  }, []);\n  const handleCategoryClick = category => {\n    if (category === '전체') {\n      setFilteredPosts(posts);\n    } else {\n      const filteredPosts = posts.filter(post => post.category === category);\n      setFilteredPosts(filteredPosts);\n    }\n  };\n  // 검색어 필터링 로직 추가\n  useEffect(() => {\n    if (searchKeyword.trim() === '') {\n      setFilteredPosts(posts);\n    } else {\n      const keywordLower = searchKeyword.toLowerCase();\n      const filtered = posts.filter(post => post.title.toLowerCase().includes(keywordLower) || post.content.toLowerCase().includes(keywordLower) ||\n      // 예시: 게시글 내용에서도 검색\n      post.category.toLowerCase().includes(keywordLower));\n      setFilteredPosts(filtered);\n    }\n  }, [searchKeyword, posts]);\n  const categoryButtons = filterdcategories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n    value: category.value,\n    onClick: () => handleCategoryClick(category.value),\n    children: category.label\n  }, category.value, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(S.PostContainer, {\n      children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(NavLink, {\n        to: `/post/${post.pid}`,\n        style: {\n          textDecoration: 'none',\n          color: 'inherit'\n        },\n        children: /*#__PURE__*/_jsxDEV(S.PostItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: post.image_urls.length > 0 && /*#__PURE__*/_jsxDEV(S.Image, {\n              src: `${process.env.REACT_APP_SUPABASE_STORAGE_URL}${post.image_urls[0]} `,\n              alt: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, post.pid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GetPost, \"mpacKfBZDEqzC8dD8NHBqUXYKl0=\", false, function () {\n  return [useAtom];\n});\n_c = GetPost;\nexport default GetPost;\nvar _c;\n$RefreshReg$(_c, \"GetPost\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","useAtom","S","supabase","filterdcategories","searchKeywordAtom","jsxDEV","_jsxDEV","Fragment","_Fragment","GetPost","_s","posts","setPosts","filteredPosts","setFilteredPosts","searchKeyword","fetchPosts","data","error","from","select","console","postsWithCompleteURLs","map","post","image_urls","replace","split","handleCategoryClick","category","filter","trim","keywordLower","toLowerCase","filtered","title","includes","content","categoryButtons","value","onClick","children","label","fileName","_jsxFileName","lineNumber","columnNumber","PostContainer","to","pid","style","textDecoration","color","PostItem","length","Image","src","process","env","REACT_APP_SUPABASE_STORAGE_URL","alt","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/GetPost.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useAtom } from 'jotai'; // 추가: jotai import\r\n\r\nimport * as S from './Styled.Posts';\r\nimport { Post } from '../../types/supabase';\r\nimport { supabase } from '../../services/supabase/supabase';\r\nimport { filterdcategories } from '../category/Category';\r\nimport { searchKeywordAtom } from '../common/Search';\r\n\r\nexport const GetPost = () => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n  const [filteredPosts, setFilteredPosts] = useState<Post[]>([]);\r\n  const [searchKeyword] = useAtom(searchKeywordAtom);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      const { data, error } = await supabase.from('posts').select('*');\r\n\r\n      if (error) {\r\n        console.error('Error fetching posts:', error);\r\n      } else {\r\n        const postsWithCompleteURLs = data.map((post) => ({\r\n          ...post,\r\n          image_urls: post.image_urls ? post.image_urls.replace(/\\[|\\]|\"/g, '').split(',') : []\r\n        }));\r\n\r\n        setPosts(postsWithCompleteURLs);\r\n        setFilteredPosts(postsWithCompleteURLs);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  const handleCategoryClick = (category: string) => {\r\n    if (category === '전체') {\r\n      setFilteredPosts(posts);\r\n    } else {\r\n      const filteredPosts = posts.filter((post) => post.category === category);\r\n      setFilteredPosts(filteredPosts);\r\n    }\r\n  };\r\n  // 검색어 필터링 로직 추가\r\n  useEffect(() => {\r\n    if (searchKeyword.trim() === '') {\r\n      setFilteredPosts(posts);\r\n    } else {\r\n      const keywordLower = searchKeyword.toLowerCase();\r\n      const filtered = posts.filter(\r\n        (post) =>\r\n          post.title.toLowerCase().includes(keywordLower) ||\r\n          post.content.toLowerCase().includes(keywordLower) || // 예시: 게시글 내용에서도 검색\r\n          post.category.toLowerCase().includes(keywordLower)\r\n      );\r\n      setFilteredPosts(filtered);\r\n    }\r\n  }, [searchKeyword, posts]);\r\n\r\n  const categoryButtons = filterdcategories.map((category) => (\r\n    <button key={category.value} value={category.value} onClick={() => handleCategoryClick(category.value)}>\r\n      {category.label}\r\n    </button>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div>{categoryButtons}</div>\r\n      <S.PostContainer>\r\n        {filteredPosts.map((post) => (\r\n          <NavLink to={`/post/${post.pid}`} key={post.pid} style={{ textDecoration: 'none', color: 'inherit' }}>\r\n            <S.PostItem>\r\n              <h2>{post.title}</h2>\r\n              <div>\r\n                {post.image_urls.length > 0 && (\r\n                  <S.Image\r\n                    src={`${process.env.REACT_APP_SUPABASE_STORAGE_URL}${post.image_urls[0]} `}\r\n                    alt={post.title}\r\n                  />\r\n                )}\r\n              </div>\r\n            </S.PostItem>\r\n          </NavLink>\r\n        ))}\r\n      </S.PostContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\posts\\\\Post.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Editor from '../editor/Editor';\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../../services/supabase/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const navigate = useNavigate();\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const handleAddPost = async () => {\n    if (!newTitle.trim() || !newBody.trim()) {\n      alert('제목과 본문을 모두 입력해주세요.');\n      return;\n    }\n    const imageUrls = [];\n    for (const selectedImage of selectedImages) {\n      const originalFileName = selectedImage.name;\n      const fileExtension = originalFileName.split('.').pop();\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\n      const existingImageResponse = await supabase.from('image_metadata').select('public_url').eq('name', randomFileName).single();\n      if (existingImageResponse.data) {\n        imageUrls.push(existingImageResponse.data.public_url);\n      } else {\n        const {\n          data,\n          error\n        } = await supabase.storage.from('1st').upload(`images/${randomFileName}`, selectedImage);\n        if (error) {\n          console.error('Error uploading image to Supabase storage:', error);\n          alert('이미지 업로드 중 에러가 발생했습니다!');\n          return;\n        }\n        const imageUrl = data.path;\n        await supabase.from('image_metadata').upsert([{\n          name: randomFileName,\n          public_url: imageUrl\n        }]);\n        imageUrls.push(imageUrl);\n      }\n    }\n    const {\n      error: insertError\n    } = await supabase.from('posts').insert([{\n      title: newTitle,\n      body: newBody,\n      image_urls: imageUrls\n    }]);\n    if (insertError) {\n      console.error('Error adding post:', insertError);\n      alert('에러가 발생했습니다!');\n      return;\n    }\n    setNewTitle('');\n    setNewBody('');\n    setSelectedImages([]);\n    alert('글 작성이 완료되었습니다.');\n    navigate(`/`);\n  };\n  const handleImageChange = async e => {\n    const selectedFiles = Array.from(e.target.files || []);\n    for (const selectedFile of selectedFiles) {\n      const originalFileName = selectedFile.name;\n      const fileExtension = originalFileName.split('.').pop();\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\n      const existingImageResponse = await supabase.from('image_metadata').select('public_url').eq('name', randomFileName).single();\n      if (existingImageResponse.data) {\n        setSelectedImages(prevSelectedImages => [...prevSelectedImages, selectedFile]);\n      } else {\n        const {\n          data,\n          error\n        } = await supabase.storage.from('1st').upload(`images/${randomFileName}`, selectedFile);\n        if (error) {\n          console.error('Error uploading image to Supabase storage:', error);\n          alert('이미지 업로드 중 에러가 발생했습니다!');\n          return;\n        }\n        const imageUrl = data.path;\n        await supabase.from('image_metadata').upsert([{\n          name: randomFileName,\n          public_url: imageUrl\n        }]);\n        setSelectedImages(prevSelectedImages => [...prevSelectedImages, selectedFile]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        value: newBody,\n        onChange: content => setNewBody(content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPost,\n        children: \"\\uAE00 \\uC791\\uC131\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"I2Cfbkjbpj42N+ND6a50+mP2TXw=\", false, function () {\n  return [useNavigate];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useNavigate","Editor","v4","uuidv4","supabase","jsxDEV","_jsxDEV","Post","_s","navigate","newTitle","setNewTitle","newBody","setNewBody","selectedImages","setSelectedImages","handleAddPost","trim","alert","imageUrls","selectedImage","originalFileName","name","fileExtension","split","pop","isEnglishFileName","test","randomFileName","existingImageResponse","from","select","eq","single","data","push","public_url","error","storage","upload","console","imageUrl","path","upsert","insertError","insert","title","body","image_urls","handleImageChange","e","selectedFiles","Array","target","files","selectedFile","prevSelectedImages","children","type","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","content","accept","multiple","onClick","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/posts/Post.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Editor from '../editor/Editor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { supabase } from '../../services/supabase/supabase';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newBody, setNewBody] = useState('');\r\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\r\n\r\n  const handleAddPost = async () => {\r\n    if (!newTitle.trim() || !newBody.trim()) {\r\n      alert('제목과 본문을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const imageUrls = [];\r\n\r\n    for (const selectedImage of selectedImages) {\r\n      const originalFileName = selectedImage.name;\r\n      const fileExtension = originalFileName.split('.').pop();\r\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\r\n\r\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\r\n\r\n      const existingImageResponse = await supabase\r\n        .from('image_metadata')\r\n        .select('public_url')\r\n        .eq('name', randomFileName)\r\n        .single();\r\n\r\n      if (existingImageResponse.data) {\r\n        imageUrls.push(existingImageResponse.data.public_url);\r\n      } else {\r\n        const { data, error } = await supabase.storage.from('1st').upload(`images/${randomFileName}`, selectedImage);\r\n\r\n        if (error) {\r\n          console.error('Error uploading image to Supabase storage:', error);\r\n          alert('이미지 업로드 중 에러가 발생했습니다!');\r\n          return;\r\n        }\r\n\r\n        const imageUrl = data.path;\r\n\r\n        await supabase.from('image_metadata').upsert([{ name: randomFileName, public_url: imageUrl }]);\r\n\r\n        imageUrls.push(imageUrl);\r\n      }\r\n    }\r\n\r\n    const { error: insertError } = await supabase\r\n      .from('posts')\r\n      .insert([{ title: newTitle, body: newBody, image_urls: imageUrls }]);\r\n\r\n    if (insertError) {\r\n      console.error('Error adding post:', insertError);\r\n      alert('에러가 발생했습니다!');\r\n      return;\r\n    }\r\n\r\n    setNewTitle('');\r\n    setNewBody('');\r\n    setSelectedImages([]);\r\n    alert('글 작성이 완료되었습니다.');\r\n    navigate(`/`);\r\n  };\r\n\r\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = Array.from(e.target.files || []);\r\n\r\n    for (const selectedFile of selectedFiles) {\r\n      const originalFileName = selectedFile.name;\r\n      const fileExtension = originalFileName.split('.').pop();\r\n      const isEnglishFileName = /^[a-zA-Z0-9]+$/.test(originalFileName);\r\n\r\n      const randomFileName = isEnglishFileName ? uuidv4() + '.' + fileExtension : originalFileName;\r\n\r\n      const existingImageResponse = await supabase\r\n        .from('image_metadata')\r\n        .select('public_url')\r\n        .eq('name', randomFileName)\r\n        .single();\r\n\r\n      if (existingImageResponse.data) {\r\n        setSelectedImages((prevSelectedImages) => [...prevSelectedImages, selectedFile]);\r\n      } else {\r\n        const { data, error } = await supabase.storage.from('1st').upload(`images/${randomFileName}`, selectedFile);\r\n\r\n        if (error) {\r\n          console.error('Error uploading image to Supabase storage:', error);\r\n          alert('이미지 업로드 중 에러가 발생했습니다!');\r\n          return;\r\n        }\r\n\r\n        const imageUrl = data.path;\r\n\r\n        await supabase.from('image_metadata').upsert([{ name: randomFileName, public_url: imageUrl }]);\r\n\r\n        setSelectedImages((prevSelectedImages) => [...prevSelectedImages, selectedFile]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Title\" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\r\n        <Editor value={newBody} onChange={(content) => setNewBody(content)} />\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <input type=\"file\" accept=\"image/*\" multiple onChange={handleImageChange} />\r\n        <button onClick={handleAddPost}>글 작성하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
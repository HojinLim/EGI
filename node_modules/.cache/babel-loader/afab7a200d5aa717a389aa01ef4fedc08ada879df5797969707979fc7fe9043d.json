{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\team_one\\\\src\\\\components\\\\comments\\\\CommentItem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as S from './Styled.Comments';\nimport CommentsPanel from './CommentPanel';\nimport useCommentMutation from '../../hooks/useCommentMutation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentItem = ({\n  comment,\n  uid,\n  isUpdating,\n  setIsUpdating\n}) => {\n  _s();\n  const [updateComment, setUpdateComment] = useState('');\n  const [updateCommentId, setUpdateCommentId] = useState(0);\n  const {\n    updateCommentMutation,\n    deleteCommentMutation\n  } = useCommentMutation();\n  const handleUpdateCommentBtnClick = (cid, comment) => {\n    setIsUpdating(true);\n    setUpdateComment(comment);\n    setUpdateCommentId(cid);\n  };\n  const handleUpdateCommentInputChange = e => {\n    setUpdateComment(e.target.value);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleUpdateClickBtn();\n    }\n  };\n  const handleUpdateClickBtn = () => {\n    if (updateComment === '') {\n      alert('작성된 댓글이 없습니다.');\n      return false;\n    }\n    const newComment = {\n      cid: updateCommentId,\n      body: updateComment\n    };\n    updateCommentMutation.mutate(newComment);\n    setUpdateComment('');\n    setIsUpdating(false);\n    setUpdateCommentId(null);\n  };\n  const handleUpdateCommentCancel = () => {\n    setIsUpdating(false);\n    setUpdateCommentId(null);\n  };\n  const handleDeleteCommentBtnClick = cid => {\n    const isConfirmed = window.confirm('삭제하시겠습니까?');\n    if (!isConfirmed) {\n      return false;\n    }\n    deleteCommentMutation.mutate(cid);\n  };\n  return /*#__PURE__*/_jsxDEV(S.CommentItem, {\n    children: [/*#__PURE__*/_jsxDEV(S.CommentProfileImgBox, {\n      children: \"\\uC0AC\\uC9C4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(S.CommentTextBox, {\n      children: [/*#__PURE__*/_jsxDEV(S.CommentAuthor, {\n        children: comment.nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), isUpdating && updateCommentId == comment.cid ? /*#__PURE__*/_jsxDEV(S.CommentInput, {\n        type: \"text\",\n        value: updateComment,\n        onChange: handleUpdateCommentInputChange,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(S.CommentBody, {\n        children: comment.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), uid === comment.uid ? isUpdating && updateCommentId === comment.cid ? /*#__PURE__*/_jsxDEV(CommentsPanel, {\n      commenting: true,\n      handleUpdateClickBtn: handleUpdateClickBtn,\n      handleUpdateCommentCancel: handleUpdateCommentCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(CommentsPanel, {\n      commenting: false,\n      handleUpdateCommentBtnClick: () => handleUpdateCommentBtnClick(comment.cid, comment.body),\n      handleDeleteCommentBtnClick: () => handleDeleteCommentBtnClick(comment.cid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentItem, \"nitZ/vlhQjNkGnpMfX0RTesk1O4=\", false, function () {\n  return [useCommentMutation];\n});\n_c = CommentItem;\nexport default CommentItem;\nvar _c;\n$RefreshReg$(_c, \"CommentItem\");","map":{"version":3,"names":["React","useState","S","CommentsPanel","useCommentMutation","jsxDEV","_jsxDEV","CommentItem","comment","uid","isUpdating","setIsUpdating","_s","updateComment","setUpdateComment","updateCommentId","setUpdateCommentId","updateCommentMutation","deleteCommentMutation","handleUpdateCommentBtnClick","cid","handleUpdateCommentInputChange","e","target","value","handleKeyDown","key","handleUpdateClickBtn","alert","newComment","body","mutate","handleUpdateCommentCancel","handleDeleteCommentBtnClick","isConfirmed","window","confirm","children","CommentProfileImgBox","fileName","_jsxFileName","lineNumber","columnNumber","CommentTextBox","CommentAuthor","nickname","CommentInput","type","onChange","onKeyDown","CommentBody","commenting","_c","$RefreshReg$"],"sources":["C:/React/team_one/src/components/comments/CommentItem.tsx"],"sourcesContent":["import React, { Dispatch, useState } from 'react';\r\nimport * as S from './Styled.Comments';\r\nimport CommentsPanel from './CommentPanel';\r\n\r\nimport type { Comment } from '../../types/supabase';\r\nimport useCommentMutation from '../../hooks/useCommentMutation';\r\nimport { SetStateAction } from 'jotai';\r\n\r\ninterface CommentItemProps {\r\n  uid: string;\r\n  comment: Comment;\r\n  isUpdating: boolean;\r\n  setIsUpdating: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst CommentItem = ({ comment, uid, isUpdating, setIsUpdating }: CommentItemProps) => {\r\n  const [updateComment, setUpdateComment] = useState('');\r\n  const [updateCommentId, setUpdateCommentId] = useState<number | null>(0);\r\n\r\n  const { updateCommentMutation, deleteCommentMutation } = useCommentMutation();\r\n\r\n  const handleUpdateCommentBtnClick = (cid: number, comment: string) => {\r\n    setIsUpdating(true);\r\n    setUpdateComment(comment);\r\n    setUpdateCommentId(cid);\r\n  };\r\n\r\n  const handleUpdateCommentInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUpdateComment(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleUpdateClickBtn();\r\n    }\r\n  };\r\n\r\n  const handleUpdateClickBtn = () => {\r\n    if (updateComment === '') {\r\n      alert('작성된 댓글이 없습니다.');\r\n      return false;\r\n    }\r\n\r\n    const newComment = {\r\n      cid: updateCommentId!,\r\n      body: updateComment\r\n    };\r\n\r\n    updateCommentMutation.mutate(newComment);\r\n\r\n    setUpdateComment('');\r\n    setIsUpdating(false);\r\n    setUpdateCommentId(null);\r\n  };\r\n\r\n  const handleUpdateCommentCancel = () => {\r\n    setIsUpdating(false);\r\n    setUpdateCommentId(null);\r\n  };\r\n\r\n  const handleDeleteCommentBtnClick = (cid: number) => {\r\n    const isConfirmed = window.confirm('삭제하시겠습니까?');\r\n    if (!isConfirmed) {\r\n      return false;\r\n    }\r\n    deleteCommentMutation.mutate(cid);\r\n  };\r\n\r\n  return (\r\n    <S.CommentItem>\r\n      <S.CommentProfileImgBox>사진</S.CommentProfileImgBox>\r\n      <S.CommentTextBox>\r\n        <S.CommentAuthor>{comment.nickname}</S.CommentAuthor>\r\n        {isUpdating && updateCommentId == comment.cid ? (\r\n          <S.CommentInput\r\n            type=\"text\"\r\n            value={updateComment}\r\n            onChange={handleUpdateCommentInputChange}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n        ) : (\r\n          <S.CommentBody>{comment.body}</S.CommentBody>\r\n        )}\r\n      </S.CommentTextBox>\r\n      {uid === comment.uid ? (\r\n        isUpdating && updateCommentId === comment.cid ? (\r\n          <CommentsPanel\r\n            commenting={true}\r\n            handleUpdateClickBtn={handleUpdateClickBtn}\r\n            handleUpdateCommentCancel={handleUpdateCommentCancel}\r\n          />\r\n        ) : (\r\n          <CommentsPanel\r\n            commenting={false}\r\n            handleUpdateCommentBtnClick={() => handleUpdateCommentBtnClick(comment.cid, comment.body)}\r\n            handleDeleteCommentBtnClick={() => handleDeleteCommentBtnClick(comment.cid)}\r\n          />\r\n        )\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </S.CommentItem>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}